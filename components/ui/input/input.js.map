{"version":3,"file":"input.js","sources":["input.tsx"],"sourcesContent":["import * as dom from \"web/dom\";\r\nimport Control, { VNode, bind, data, Changes } from \"ui/control\";\r\nimport { Status, getStatus, setStatus } from \"web/status\";\r\nimport ToolTip from \"ui/toolTip\";\r\n\r\n/**\r\n * 表示一个输入控件。\r\n */\r\nexport default class Input extends Control {\r\n\r\n    protected render() {\r\n        return <input type=\"hidden\" />;\r\n    }\r\n\r\n    /**\r\n     * 内部关联的输入框元素。\r\n     */\r\n    get input() {\r\n        return (dom.find(this.elem, \"input,select,textarea\") || this.elem) as HTMLInputElement;\r\n    }\r\n\r\n    /**\r\n     * 名字。\r\n     */\r\n    @bind(\"@input\", \"name\") name: string;\r\n\r\n    /**\r\n     * 值。\r\n     */\r\n    get value(): any { return this.input.value; }\r\n    set value(value) { this.input.value = value == undefined ? null : value; }\r\n\r\n    /**\r\n     * 默认值。\r\n     */\r\n    get defaultValue(): this[\"value\"] { return this.input.defaultValue; }\r\n    set defaultValue(value) { this.input.defaultValue = value == undefined ? null : value; }\r\n\r\n    /**\r\n     * 输入框的类型。\r\n     */\r\n    @bind(\"@input\", \"type\") type: string;\r\n\r\n    /**\r\n     * 未输入内容时的占位符。\r\n     */\r\n    @bind(\"@input\", \"placeholder\") placeholder: string;\r\n\r\n    /**\r\n     * 是否禁用。\r\n     */\r\n    @bind(\"@input\", \"disabled\") disabled: boolean;\r\n\r\n    /**\r\n     * 是否只读。\r\n     */\r\n    @bind(\"@input\", \"readOnly\") readOnly: boolean;\r\n\r\n    /**\r\n     * TAB 键切换顺序。\r\n     */\r\n    @bind(\"@input\", \"tabIndex\") tabIndex: number;\r\n\r\n    /**\r\n     * 是否允许 TAB 键停靠。\r\n     */\r\n    @bind(\"@input\", \"tabStop\") tabStop: boolean;\r\n\r\n    /**\r\n     * 复制事件。\r\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers/oncopy\r\n     */\r\n    @bind(\"@input\", \"onCopy\") onCopy: (e: ClipboardEvent, sender: this) => void;\r\n\r\n    /**\r\n     * 剪切事件。\r\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers/oncut\r\n     */\r\n    @bind(\"@input\", \"onCut\") onCut: (e: ClipboardEvent, sender: this) => void;\r\n\r\n    /**\r\n     * 粘贴事件。\r\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers/onpaste\r\n     */\r\n    @bind(\"@input\", \"onPaste\") onPaste: (e: ClipboardEvent, sender: this) => void;\r\n\r\n    /**\r\n     * 即将复制事件。\r\n     * @see https://msdn.microsoft.com/zh-cn/library/aa769320.ASPX\r\n     */\r\n    @bind(\"@input\", \"onBeforeCopy\") onBeforeCopy: (e: ClipboardEvent, sender: this) => void;\r\n\r\n    /**\r\n     * 即将剪切事件。\r\n     * @see https://msdn.microsoft.com/zh-cn/library/aa769321.aspx\r\n     */\r\n    @bind(\"@input\", \"onBeforeCut\") onBeforeCut: (e: ClipboardEvent, sender: this) => void;\r\n\r\n    /**\r\n     * 即将粘贴事件。\r\n     * @see https://msdn.microsoft.com/zh-cn/library/aa769324.aspx\r\n     */\r\n    @bind(\"@input\", \"onBeforePaste\") onBeforePaste: (e: ClipboardEvent, sender: this) => void;\r\n\r\n    /**\r\n     * 获取焦点事件。\r\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers/nfocus\r\n     */\r\n    @bind(\"@input\", \"onFocus\") onFocus: (e: FocusEvent, sender: this) => void;\r\n\r\n    /**\r\n     * 失去焦点事件。\r\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers/onblur\r\n     */\r\n    @bind(\"@input\", \"onBlur\") onBlur: (e: FocusEvent, sender: this) => void;\r\n\r\n    /**\r\n     * 当前元素和子元素获取焦点事件。\r\n     * @see https://msdn.microsoft.com/zh-CN/library/ms536935(VS.85).aspx\r\n     */\r\n    @bind(\"@input\", \"onFocusIn\") onFocusIn: (e: FocusEvent, sender: this) => void;\r\n\r\n    /**\r\n     * 当前元素和子元素失去焦点事件。\r\n     * @see https://msdn.microsoft.com/zh-CN/library/ms536936(VS.85).aspx\r\n     */\r\n    @bind(\"@input\", \"onFocusOut\") onFocusOut: (e: FocusEvent, sender: this) => void;\r\n\r\n    /**\r\n     * 输入事件。\r\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers/oninput\r\n     */\r\n    @bind(\"@input\", \"onInput\") onInput: (e: Event, sender: this) => void;\r\n\r\n    /**\r\n     * 更改事件。\r\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlersonchange\r\n     */\r\n    @bind(\"@input\", \"onChange\") onChange: (e: Event, sender: this) => void;\r\n\r\n    /**\r\n     * 键盘按下事件。\r\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers/onkeydown\r\n     */\r\n    @bind(\"@input\", \"onKeyDown\") onKeyDown: (e: KeyboardEvent, sender: this) => void;\r\n\r\n    /**\r\n     * 键盘点击事件。\r\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers/onkeypress\r\n     */\r\n    @bind(\"@input\", \"onKeyPress\") onKeyPress: (e: KeyboardEvent, sender: this) => void;\r\n\r\n    /**\r\n     * 键盘按上事件。\r\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers/onkeyup\r\n     */\r\n    @bind(\"@input\", \"onKeyUp\") onKeyUp: (e: KeyboardEvent, sender: this) => void;\r\n\r\n    /**\r\n     * 回车事件。\r\n     */\r\n    get onEnter() {\r\n        return this._onEnter;\r\n    }\r\n    set onEnter(value) {\r\n        this._onEnter = value;\r\n        if (value && !this._onEnterProxy) {\r\n            dom.on(this.input, \"keyup\", this._onEnterProxy = e => {\r\n                if (e.keyCode === 10 || e.keyCode === 13) {\r\n                    value.call(this, e, this);\r\n                }\r\n            });\r\n        } else if (this._onEnterProxy && !value) {\r\n            dom.off(this.input, \"keyup\", this._onEnterProxy);\r\n            this._onEnterProxy = undefined;\r\n        }\r\n    }\r\n\r\n    private _onEnter?: (e: KeyboardEvent, sender: this) => void;\r\n\r\n    private _onEnterProxy?: (e: KeyboardEvent) => void;\r\n\r\n    /**\r\n     * 控件状态。\r\n     */\r\n    get status() {\r\n        return getStatus(this.input, this.statusClassPrefix);\r\n    }\r\n    set status(value) {\r\n        setStatus(this.input, this.statusClassPrefix, this.hideSuccess && value === \"success\" ? null : value);\r\n    }\r\n\r\n    /**\r\n     * 控件状态前缀。\r\n     */\r\n    statusClassPrefix: string;\r\n\r\n    /**\r\n     * 是否隐藏验证成功状态。\r\n     */\r\n    hideSuccess: boolean;\r\n\r\n    /**\r\n     * 是否禁用验证。\r\n     */\r\n    noValidate: boolean;\r\n\r\n    /**\r\n     * 触发验证的事件。\r\n     */\r\n    validateEvent: string | null;\r\n\r\n    /**\r\n     * 字段是否必填。\r\n     */\r\n    required: boolean;\r\n\r\n    /**\r\n     * 字段不满足必填时的提示文案。\r\n     */\r\n    requiredMessage: string;\r\n\r\n    /**\r\n     * 最大长度。-1 表示不限制。\r\n     */\r\n    maxLength: number;\r\n\r\n    /**\r\n     * 字段不满足最大长度时的提示文案。\r\n     */\r\n    maxLengthMessage: string;\r\n\r\n    /**\r\n     * 最小长度。-1 表示不限制。\r\n     */\r\n    minLength: number;\r\n\r\n    /**\r\n     * 字段不满足最小长度时的提示文案。\r\n     */\r\n    minLengthMessage: string;\r\n\r\n    /**\r\n     * 最大值。\r\n     */\r\n    max: any;\r\n\r\n    /**\r\n     * 字段不满足最大值时的提示文案。\r\n     */\r\n    maxMessage: string;\r\n\r\n    /**\r\n     * 最小值。\r\n     */\r\n    min: any;\r\n\r\n    /**\r\n     * 字段不满足最小值时的提示文案。\r\n     */\r\n    minMessage: string;\r\n\r\n    /**\r\n     * 匹配格式的正则表达式。\r\n     */\r\n    pattern: RegExp;\r\n\r\n    /**\r\n     * 字段不满足格式时的提示文案。\r\n     */\r\n    patternMessage: string;\r\n\r\n    /**\r\n     * 验证失败的提示文案。\r\n     */\r\n    validateErrorMessage: string;\r\n\r\n    /**\r\n     * 开始异步验证的提示文案。\r\n     */\r\n    validateStartMessage: string;\r\n\r\n    /**\r\n     * 开始异步验证的提示文案前缀。\r\n     */\r\n    validateStartMessagePrefix: string;\r\n\r\n    /**\r\n     * 验证信息状态的提示文案前缀。\r\n     */\r\n    validateInfoMessagePrefix: string;\r\n\r\n    /**\r\n     * 验证失败状态的提示文案前缀。\r\n     */\r\n    validateErrorMessagePrefix: string;\r\n\r\n    /**\r\n     * 验证警告状态的提示文案前缀。\r\n     */\r\n    validateWarningMessagePrefix: string;\r\n\r\n    /**\r\n     * 验证成功状态的提示文案前缀。\r\n     */\r\n    validateSuccessMessagePrefix: string;\r\n\r\n    /**\r\n     * 本地化提示文案。\r\n     */\r\n    static locale = {\r\n        requiredMessage: `该字段为必填的`,\r\n        maxLengthMessage: `该字段最大长度为 {bound}，超出 {delta}`,\r\n        minLengthMessage: `该字段最少长度为 {bound}，缺少 {delta}`,\r\n        maxMessage: `该字段最大为 {bound}`,\r\n        minMessage: `该字段最小为 {bound}`,\r\n        patternMessage: `该字段格式不正确`,\r\n        validateErrorMessage: `该字段验证未通过`,\r\n        validateStartMessage: `正在验证中...`,\r\n        validateStartMessagePrefix: `<i class=\"x-icon x-spin\">҉</i> `,\r\n        validateInfoMessagePrefix: `<i class=\"x-icon\">🛈</i> `,\r\n        validateSuccessMessagePrefix: `<i class=\"x-icon\">✓</i> `,\r\n        validateWarningMessagePrefix: `<i class=\"x-icon\">⚠</i> `,\r\n        validateErrorMessagePrefix: `<i class=\"x-icon\">&#10071;</i> `\r\n    };\r\n\r\n    /**\r\n     * 判断输入域样式是否被隐藏。\r\n     * @return 如果控件或其父元素被隐藏则返回 true，否则返回 false。\r\n     */\r\n    isHidden() {\r\n        if (!this.elem.offsetHeight) {\r\n            for (let p = this.elem; p; p = p.parentNode as HTMLElement) {\r\n                if (dom.isHidden(p)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 判断当前输入域是否需要验证。\r\n     */\r\n    get willValidate() {\r\n        if (this.noValidate || this.readOnly || this.disabled || this.isHidden()) {\r\n            return false;\r\n        }\r\n        if (this.onValidate || this.required || this.maxLength >= 0 || this.minLength >= 0 || this.max != null || this.min != null || this.pattern || this.validate !== Input.prototype.validate) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    protected init() {\r\n        if (this.validateEvent) {\r\n            dom.on(this.input, this.validateEvent, this.handleValidateEvent, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 验证事件触发后延时验证的毫秒数。\r\n     */\r\n    validateDelay: number;\r\n\r\n    /**\r\n     * 重新验证事件触发后延时验证的毫秒数。\r\n     */\r\n    revalidateDelay: number;\r\n\r\n    /**\r\n     * 如果使用了延时验证则存储延时计时器。\r\n     */\r\n    private _validateTimer: any;\r\n\r\n    /**\r\n     * 处理验证事件。\r\n     */\r\n    protected handleValidateEvent() {\r\n        if (this.validateEvent) {\r\n            const delay = this.status === \"error\" ? this.revalidateDelay : this.validateDelay;\r\n            if (delay) {\r\n                if (this._validateTimer) clearTimeout(this._validateTimer);\r\n                this._validateTimer = setTimeout(() => {\r\n                    delete this._validateTimer;\r\n                    this.reportValidity();\r\n                }, delay);\r\n            } else {\r\n                this.reportValidity();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 验证当前输入域。\r\n     * @return 返回验证结果。如果正在执行异步验证则返回一个确认对象。\r\n     */\r\n    checkValidity(): NormalizedValidityResult | Promise<NormalizedValidityResult> {\r\n\r\n        // 测试是否已填数据。\r\n        const value = this.value;\r\n        if (value == null || value.length === 0 && (typeof value === \"string\" || Array.isArray(value))) {\r\n            if (this.required) {\r\n                return { valid: false, status: \"error\", message: this.requiredMessage };\r\n            }\r\n            return { valid: true, status: null };\r\n        }\r\n\r\n        // 执行内置验证。\r\n        const r = this.normlizeValidityResult(this.validate(value));\r\n        if (r instanceof Promise) {\r\n            return r.then(r => {\r\n                if (!r.valid) {\r\n                    return r;\r\n                }\r\n\r\n                // 执行自定义验证。\r\n                if (this.onValidate) {\r\n                    return this.normlizeValidityResult(this.onValidate(value, this));\r\n                }\r\n\r\n                // 验证成功。\r\n                return r;\r\n            });\r\n        }\r\n\r\n        if (!r.valid) {\r\n            return r;\r\n        }\r\n\r\n        // 执行自定义验证。\r\n        if (this.onValidate) {\r\n            return this.normlizeValidityResult(this.onValidate(value, this));\r\n        }\r\n\r\n        // 验证成功。\r\n        return r;\r\n    }\r\n\r\n    /**\r\n     * 当被子类重写时负责验证指定的值。\r\n     * @param value 要验证的值。\r\n     * @return 返回验证结果。如果正在执行异步验证则返回一个确认对象。\r\n     */\r\n    protected validate(value: this[\"value\"]): ValidityResult {\r\n        if (this.maxLength >= 0 && (value as any).length > this.maxLength) {\r\n            return this.maxLengthMessage.replace(\"{bound}\", this.maxLength as any).replace(\"{delta}\", ((value as any).length - this.maxLength) as any);\r\n        }\r\n        if (this.minLength >= 0 && (value as any).length < this.minLength) {\r\n            return this.minLengthMessage.replace(\"{bound}\", this.minLength as any).replace(\"{delta}\", (this.minLength - (value as any).length) as any);\r\n        }\r\n        if (this.max != null && value > this.max) {\r\n            return this.maxMessage.replace(\"{bound}\", this.max);\r\n        }\r\n        if (this.min != null && value < this.min) {\r\n            return this.minMessage.replace(\"{bound}\", this.min);\r\n        }\r\n        if (this.pattern && !this.pattern.test(value)) {\r\n            return this.patternMessage.replace(\"{bound}\", this.pattern as any);\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * 验证事件。\r\n     * @param value 要验证的值。\r\n     * @param sender 触发事件的源。\r\n     * @return 返回验证结果。如果正在执行异步验证则返回一个确认对象。\r\n     */\r\n    onValidate: (value: this[\"value\"], sender: this) => ValidityResult;\r\n\r\n    /**\r\n     * 规范化验证结果对象。\r\n     * @param r 用户返回的验证结果。\r\n     * @param 返回已格式化的验证结果。\r\n     */\r\n    protected normlizeValidityResult(r: ValidityResult): NormalizedValidityResult | Promise<NormalizedValidityResult> {\r\n        if (r instanceof Promise) {\r\n            return r.then(r => this.normlizeValidityResult(r));\r\n        }\r\n        if (typeof r === \"boolean\") {\r\n            r = {\r\n                valid: r,\r\n                message: r ? null : this.validateErrorMessage\r\n            } as NormalizedValidityResult;\r\n        } else if (typeof r === \"string\") {\r\n            r = {\r\n                valid: !r,\r\n                message: r,\r\n            };\r\n        }\r\n        if (r.valid == undefined) {\r\n            r.valid = !r.status || r.status === \"success\";\r\n        }\r\n        if (r.status === undefined) {\r\n            r.status = r.valid ? \"success\" : \"error\";\r\n        }\r\n        if (r.prefix === undefined) {\r\n            r.prefix = r.status === \"success\" ? this.validateSuccessMessagePrefix : r.status === \"error\" ? this.validateErrorMessagePrefix : r.status === \"warning\" ? this.validateWarningMessagePrefix : r.status === \"info\" ? this.validateInfoMessagePrefix : null;\r\n        }\r\n        return r as NormalizedValidityResult;\r\n    }\r\n\r\n    /**\r\n     * 向用户报告验证结果。\r\n     * @return 返回验证结果。如果正在执行异步验证则返回一个确认对象。\r\n     */\r\n    reportValidity() {\r\n        const r = this.willValidate ? this.checkValidity() : { valid: true, status: null };\r\n        if (r instanceof Promise) {\r\n            if (!this._validatePromise) {\r\n                this.setCustomValidity({ valid: false, status: \"warning\", message: this.validateStartMessage, prefix: this.validateStartMessagePrefix });\r\n            }\r\n            const promise = this._validatePromise = r.then(r => {\r\n                if (this._validatePromise === promise) {\r\n                    delete this._validatePromise;\r\n                    this.setCustomValidity(r);\r\n                }\r\n                return r;\r\n            }, (reason: string) => {\r\n                const r = { valid: false, status: \"error\", message: this.validateErrorMessage + \" \" + reason } as NormalizedValidityResult;\r\n                if (this._validatePromise === promise) {\r\n                    delete this._validatePromise;\r\n                    this.setCustomValidity(r);\r\n                }\r\n                return r;\r\n            });\r\n            return promise;\r\n        }\r\n        this.setCustomValidity(r);\r\n        return r;\r\n    }\r\n\r\n    /**\r\n     * 存储最后一次确认对象。\r\n     */\r\n    private _validatePromise: Promise<NormalizedValidityResult>;\r\n\r\n    /**\r\n     * 设置自定义的验证消息。\r\n     * @param validityResult 要报告的验证结果。\r\n     */\r\n    setCustomValidity(validityResult: string | boolean | Partial<NormalizedValidityResult>) {\r\n\r\n        // 统一验证结果数据格式。\r\n        validityResult = this.normlizeValidityResult(validityResult) as NormalizedValidityResult;\r\n\r\n        // 更新状态。\r\n        this.status = (validityResult as NormalizedValidityResult).status;\r\n\r\n        // 自定义错误报告。\r\n        if (this.onReportValidity && this.onReportValidity(validityResult as NormalizedValidityResult, this) === false) {\r\n            return;\r\n        }\r\n\r\n        // 提示验证信息。\r\n        const tip = dom.next(this.elem, \".x-tip,.x-tipbox\");\r\n        if (tip) {\r\n            setStatus(tip, dom.hasClass(tip, \"x-tipbox\") ? \"x-tipbox-\" : \"x-tip-\", this.status);\r\n            if (validityResult.message || validityResult.prefix) {\r\n                if (!(\"__innerHTML__\" in tip)) {\r\n                    (tip as any).__innerHTML__ = tip.innerHTML;\r\n                }\r\n                tip.textContent = validityResult.message || \"\";\r\n                if (validityResult.prefix) dom.prepend(tip, validityResult.prefix);\r\n            } else if (\"__innerHTML__\" in tip) {\r\n                tip.innerHTML = (tip as any).__innerHTML__;\r\n                delete (tip as any).__innerHTML__;\r\n            }\r\n        } else {\r\n            let validityToolTip = this._validityToolTip;\r\n            if (validityResult.message) {\r\n                if (!validityToolTip) {\r\n                    this._validityToolTip = validityToolTip = this.createValidityToolTip();\r\n                }\r\n                const arrow = dom.first(validityToolTip.elem, \".x-arrow\");\r\n                validityToolTip.elem.textContent = validityResult.message || \"\";\r\n                if (validityResult.prefix) dom.prepend(validityToolTip.elem, validityResult.prefix);\r\n                if (arrow) dom.prepend(validityToolTip.elem, arrow);\r\n                validityToolTip.show();\r\n            } else if (validityToolTip) {\r\n                validityToolTip.hide();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 报告验证结果事件。\r\n     * @param validityResult 要报告的验证结果。\r\n     * @param sender 触发事件的源。\r\n     * @return 返回 false 禁用默认报告器。\r\n     */\r\n    onReportValidity: (validityResult: NormalizedValidityResult, sender: this) => boolean | void;\r\n\r\n    /**\r\n     * 当被子类重写时负责创建当前输入框的默认验证提示。\r\n     */\r\n    protected createValidityToolTip() {\r\n        const validityToolTip = new ToolTip();\r\n        validityToolTip.event = \"focusin\";\r\n        validityToolTip.onShow = () => {\r\n            if (!this.status || this.status === \"success\") {\r\n                this._validityToolTip.hide();\r\n            }\r\n        };\r\n        validityToolTip.target = this.elem;\r\n        Object.assign(validityToolTip, this.validityToolTipOptions);\r\n        dom.after(this.elem, validityToolTip.elem);\r\n        return validityToolTip;\r\n    }\r\n\r\n    /**\r\n     * 用于报告验证失败的工具提示。\r\n     */\r\n    private _validityToolTip: ToolTip;\r\n\r\n    /**\r\n     * 验证工具提示的选项。\r\n     */\r\n    validityToolTipOptions: Partial<ToolTip>;\r\n\r\n    /**\r\n     * 重置当前输入域。\r\n     */\r\n    reset() {\r\n        this.setCustomValidity({ valid: true, status: null });\r\n        this.value = this.defaultValue;\r\n    }\r\n\r\n    /**\r\n     * 令当前控件获得焦点。\r\n     */\r\n    focus() {\r\n        this.input.focus();\r\n    }\r\n\r\n    /**\r\n     * 令当前控件失去焦点。\r\n     */\r\n    blur() {\r\n        this.input.blur();\r\n    }\r\n\r\n    layout(changes: Changes) {\r\n        if ((changes & Changes.prop) && this.status) {\r\n            this.reportValidity();\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfor (const key in Input.locale) {\r\n    Input.prototype[key as keyof typeof Input[\"locale\"]] = Input.locale[key as keyof typeof Input[\"locale\"]];\r\n}\r\nInput.prototype.statusClassPrefix = \"x-\";\r\nInput.prototype.validateEvent = \"change\";\r\n\r\n/**\r\n * 表示验证的结果。\r\n */\r\nexport type ValidityResult = boolean | string | Partial<NormalizedValidityResult> | Promise<boolean | string | Partial<NormalizedValidityResult>>;\r\n\r\n/**\r\n * 表示已格式化的验证结果。\r\n */\r\nexport interface NormalizedValidityResult {\r\n\r\n    /**\r\n     * 验证是否通过。只有验证通过后数据才会提交。一般地仅当 *status* 为空或者 \"success\" 时才会验证通过。\r\n     */\r\n    valid: boolean;\r\n\r\n    /**\r\n     * 验证的结果状态。\r\n     */\r\n    status: Status;\r\n\r\n    /**\r\n     * 提示的信息前缀。\r\n     */\r\n    prefix?: string | null;\r\n\r\n    /**\r\n     * 提示的信息。\r\n     */\r\n    message?: string;\r\n\r\n}\r\n"],"mappings":"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"}