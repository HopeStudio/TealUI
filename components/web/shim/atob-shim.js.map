{"version":3,"file":"atob-shim.js","sources":["atob-shim.js"],"sourcesContent":["/**\r\n * Base64 编码。\r\n * @param value 要转换的文本。\r\n * @return 转换后的文本。\r\n * @example atob(\"abcefg\")\r\n * @since ES4\r\n */\r\natob = this.atob || function (value) {\r\n    let r = \"\";\r\n    value = value.replace(/=+$/, \"\");\r\n    if (value.length % 4 === 1) throw new Error(\"Invalid Char\");\r\n    for (\r\n        // initialize r and counters\r\n        let bc = 0, bs, buffer, idx = 0;\r\n        // get next character\r\n        (buffer = value.charAt(idx++));\r\n        // character found in table? initialize bit storage and add its ascii value;\r\n        ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\r\n            // and if not first of each 4 characters,\r\n            // convert the first 8 bits to one ascii character\r\n            bc++ % 4) ? r += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\r\n    ) {\r\n        // try to find character in table (0-63, not found => -1)\r\n        buffer = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(buffer);\r\n    }\r\n    return r;\r\n};\r\n\r\n/**\r\n * Base64 解码。\r\n * @param value 要转换的文本。\r\n * @return 转换后的文本。\r\n * @example btoa(\"abcefg\")\r\n * @since ES4\r\n */\r\nbtoa = this.btoa || function (value) {\r\n    let r = \"\";\r\n    for (\r\n        // initialize r and counter\r\n        let block,\r\n        charCode,\r\n        idx = 0,\r\n        map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\n        // if the next str index does not exist:\r\n        //   change the mapping table to \"=\"\r\n        //   check if d has no fractional digits\r\n        value.charAt(idx | 0) || (map = \"=\", idx % 1);\r\n        // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\r\n        r += map.charAt(63 & block >> 8 - idx % 1 * 8)\r\n    ) {\r\n        charCode = value.charCodeAt(idx += 3 / 4);\r\n        if (charCode > 0xFF) throw new Error(\"Invalid Char\");\r\n        block = block << 8 | charCode;\r\n    }\r\n    return r;\r\n};\r\n"],"mappings":"AAAA;;;;;;GAMG;AACH,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,UAAU,KAAK;IAC/B,IAAI,CAAC,GAAG,EAAE,CAAC;IACX,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IACjC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC;QAAC,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;IAC5D,GAAG,CAAC,CAAC;IACD,4BAA4B;IAC5B,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,SAAA,EAAE,MAAM,SAAA,EAAE,GAAG,GAAG,CAAC;IAC/B,qBAAqB;IACrB,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;IAC9B,4EAA4E;IAC5E,CAAC,MAAM,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM;QAC/C,yCAAyC;QACzC,kDAAkD;QAClD,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,YAAY,CAAC,GAAG,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACzE,CAAC;QACC,yDAAyD;QACzD,MAAM,GAAG,mEAAmE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACjG,CAAC;IACD,MAAM,CAAC,CAAC,CAAC;AACb,CAAC,CAAC;AAEF;;;;;;GAMG;AACH,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,UAAU,KAAK;IAC/B,IAAI,CAAC,GAAG,EAAE,CAAC;IACX,GAAG,CAAC,CAAC;IACD,2BAA2B;IAC3B,IAAI,KAAK,SAAA,EACT,QAAQ,SAAA,EACR,GAAG,GAAG,CAAC,EACP,GAAG,GAAG,mEAAmE;IACzE,wCAAwC;IACxC,oCAAoC;IACpC,wCAAwC;IACxC,KAAK,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC;IAC7C,sDAAsD;IACtD,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,EAAE,GAAG,KAAK,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,EAChD,CAAC;QACC,QAAQ,GAAG,KAAK,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAC1C,EAAE,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC;YAAC,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;QACrD,KAAK,GAAG,KAAK,IAAI,CAAC,GAAG,QAAQ,CAAC;IAClC,CAAC;IACD,MAAM,CAAC,CAAC,CAAC;AACb,CAAC,CAAC"}