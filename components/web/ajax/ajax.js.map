{"version":3,"file":"ajax.js","sources":["ajax.ts"],"sourcesContent":["import { formatQuery, setQuery, appendQuery } from \"util/query\";\r\n\r\n/**\r\n * 发送一个异步请求。\r\n * @param options 发送的选项。\r\n * @return 返回请求对象。\r\n */\r\nexport default function ajax(options?: Partial<Ajax>) {\r\n    const r = new Ajax();\r\n    Object.assign(r, options);\r\n    if (r.data != undefined && !(r.data instanceof FormData)) {\r\n        r.contentType = r.contentType || \"application/x-www-form-urlencoded\";\r\n        if (typeof r.data === \"object\") {\r\n            r.data = r.contentType === \"application/json\" && r.type !== \"GET\" ? JSON.stringify(r.data) : formatQuery(r.data);\r\n        }\r\n        if (r.type === \"GET\") {\r\n            r.url = appendQuery(r.url, r.data);\r\n            r.data = null;\r\n        }\r\n    }\r\n    r.send();\r\n    return r;\r\n}\r\n\r\n/**\r\n * 表示一个异步请求。\r\n */\r\nexport class Ajax {\r\n\r\n    /**\r\n     * 请求的类型（方法、谓词）。请求类型应全大写。\r\n     * @default \"GET\"\r\n     */\r\n    type: \"GET\" | \"POST\" | \"HEAD\" | \"OPTIONS\" | \"PUT\" | \"DELETE\" | string;\r\n\r\n    /**\r\n     * 请求的地址。可以是相对于当前页面地址的相对地址。\r\n     * @default location.href\r\n     */\r\n    url: string;\r\n\r\n    /**\r\n     * 请求的数据。可以是字符串、JSON 对象或 FormData。\r\n     */\r\n    data: any;\r\n\r\n    /**\r\n     * 请求数据的 MIME 类型。\r\n     * @default \"application/x-www-form-urlencoded\"\r\n     */\r\n    contentType: string;\r\n\r\n    /**\r\n     * 附加的请求头。\r\n     */\r\n    headers: { [name: string]: string };\r\n\r\n    /**\r\n     * 服务器的用户名。\r\n     */\r\n    username: string;\r\n\r\n    /**\r\n     * 服务器的密码。\r\n     */\r\n    password: string;\r\n\r\n    /**\r\n     * 是否发送用户凭证（如 Cookie 登陆信息）。\r\n     */\r\n    withCredentials: boolean;\r\n\r\n    /**\r\n     * 响应数据的类型。\r\n     * @desc 其中 \"arraybuffer\" 和 \"blob\" 仅支持：CH 31+、FF 12+、IE 10+、OP 18+、SF 7.1+、Android 4.4.1+。\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType\r\n     */\r\n    responseType: \"text\" | \"json\" | \"document\" | \"arraybuffer\" | \"blob\";\r\n\r\n    /**\r\n     * 请求的超时毫秒数。如果小于 0 则不设置超时。\r\n     */\r\n    timeout: number;\r\n\r\n    /**\r\n     * 获取底层发送请求的对象。\r\n     */\r\n    xhr: XMLHttpRequest;\r\n\r\n    /**\r\n     * 获取服务器返回的状态码。如果小于 0 表示请求未发出。\r\n     */\r\n    status: number;\r\n\r\n    /**\r\n     * 获取服务器响应的数据。数据的类型根据 *responseType* 决定。\r\n     */\r\n    response: any;\r\n\r\n    /**\r\n     * 获取响应头。\r\n     * @param name 响应头。\r\n     * @return 返回响应头数据。如果响应头不存在则返回 null。\r\n     */\r\n    getResponseHeader(name: string) {\r\n        return this.xhr && this.xhr.getResponseHeader(name);\r\n    }\r\n\r\n    /**\r\n     * 请求成功的回调函数。\r\n     * @param response 响应的数据。\r\n     * @param sender 当前请求对象。\r\n     */\r\n    success?: (response: any, sender: this) => void;\r\n\r\n    /**\r\n     * 请求失败的回调函数。\r\n     * @param error 错误的信息文本或对象。\r\n     * @param sender 当前请求对象。\r\n     */\r\n    error?: (error: string | Error, sender: this) => void;\r\n\r\n    /**\r\n     * 请求完成的回调函数。无论请求是否成功都会执行此回调。\r\n     * @param error 如果请求错误，则值为错误的信息文本或对象。\r\n     * @param sender 当前请求对象。\r\n     */\r\n    complete?: (error: string | Error | undefined, sender: this) => void;\r\n\r\n    /**\r\n     * 发送请求。\r\n     * @return 如果请求发送成功则返回 true，否则返回 false。\r\n     */\r\n    send() {\r\n        this.sending = true;\r\n        const xhr = this.xhr = new XMLHttpRequest();\r\n        try {\r\n            xhr.open(this.type, this.url, true, this.username, this.password);\r\n        } catch (ieOpenError) {\r\n            // IE：地址错误时可能产生异常。\r\n            this.progress(ieOpenError, -3);\r\n            return false;\r\n        }\r\n\r\n        for (const header in this.headers) {\r\n            try {\r\n                xhr.setRequestHeader(header, this.headers[header]);\r\n            } catch (firefoxSetHeaderError) {\r\n                // FF：跨域时设置头可能产生异常。\r\n            }\r\n        }\r\n        if (this.contentType) {\r\n            try {\r\n                xhr.setRequestHeader(\"Content-Type\", this.contentType);\r\n            } catch (firefoxSetHeaderError) {\r\n                // FF：跨域时设置头可能产生异常。\r\n            }\r\n        }\r\n        if (this.withCredentials) {\r\n            xhr.withCredentials = true;\r\n        }\r\n        if (this.responseType && (this.responseType === \"arraybuffer\" || this.responseType === \"blob\")) {\r\n            xhr.responseType = this.responseType;\r\n        }\r\n\r\n        try {\r\n            xhr.onreadystatechange = this.progress;\r\n            xhr.send(this.data);\r\n        } catch (sendError) {\r\n            // 地址错误时会产生异常。\r\n            this.progress(sendError, -4);\r\n            return false;\r\n        }\r\n        if (this.timeout >= 0) {\r\n            setTimeout(this.progress, this.timeout, \"Timeout\", -2);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 处理请求状态改变的回调函数。\r\n     * @param data 数据。\r\n     * @param internalError 如果是内置错误则值为内置错误码。\r\n     */\r\n    protected progress = (data: string | Error | Event | undefined, internalError?: number) => {\r\n        const xhr = this.xhr;\r\n        try {\r\n            // 仅当正在发送请求且请求已完成时继续执行。\r\n            if (!this.sending || !internalError && xhr.readyState !== 4) {\r\n                return;\r\n            }\r\n            this.sending = false;\r\n\r\n            // 删除 readystatechange 以避免有些浏览器的内存泄露。\r\n            xhr.onreadystatechange = null!;\r\n\r\n            // 处理内置错误。\r\n            if (internalError) {\r\n                this.status = internalError;\r\n                if (xhr.readyState !== 4) {\r\n                    xhr.abort();\r\n                }\r\n            } else if (checkStatus(this.status = xhr.status)) {\r\n                try {\r\n                    switch (this.responseType) {\r\n                        case undefined:\r\n                        case \"text\":\r\n                            this.response = xhr.responseText;\r\n                            break;\r\n                        case \"json\":\r\n                            this.response = JSON.parse(xhr.responseText);\r\n                            break;\r\n                        case \"document\":\r\n                            this.response = xhr.responseXML;\r\n                            break;\r\n                        default:\r\n                            this.response = xhr.response;\r\n                            break;\r\n                    }\r\n                    data = undefined;\r\n                } catch (responseError) {\r\n                    // 解析响应数据报错。\r\n                    // IE6-9：请求二进制格式的文件报错。\r\n                    this.status = -6;\r\n                    this.response = undefined;\r\n                    data = responseError;\r\n                }\r\n            } else {\r\n                data = xhr.statusText || \"Access denied\";\r\n            }\r\n        } catch (firefoxAccessError) {\r\n            this.progress(firefoxAccessError, -5);\r\n            return;\r\n        }\r\n\r\n        // 触发回调。\r\n        if (data === undefined) {\r\n            this.success && this.success(this.response, this);\r\n        } else {\r\n            this.error && this.error(data as string | Error, this);\r\n        }\r\n        this.complete && this.complete(data as string | Error, this);\r\n    }\r\n\r\n    /**\r\n     * 判断是否正在发送请求。\r\n     */\r\n    sending?: boolean;\r\n\r\n    /**\r\n     * 终止当前请求。\r\n     */\r\n    abort() {\r\n        this.progress(\"Aborted\", -1);\r\n    }\r\n\r\n}\r\n\r\nAjax.prototype.type = \"GET\";\r\nAjax.prototype.url = \"\";\r\n\r\n/**\r\n * 判断一个 HTTP 状态码是否表示正确响应。\r\n * @param status 要判断的状态码。\r\n * @return 如果正确则返回 true, 否则返回 false 。一般地，2xx、304、1223 被认为是正确的状态吗。\r\n */\r\nexport function checkStatus(status: number) {\r\n    if (!status) {\r\n        const protocol = window.location.protocol;\r\n        // CH：status 在有些协议不存在。\r\n        return protocol === \"file:\" || protocol === \"chrome:\" || protocol === \"app:\";\r\n    }\r\n    return status >= 200 && status < 300 || status === 304 || status === 1223;\r\n}\r\n"],"mappings":";;;IAEA;;;;OAIG;IACH,cAA6B,OAAuB;QAChD,IAAM,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;QACrB,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;QAC1B,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,SAAS,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,YAAY,QAAQ,CAAC,CAAC,CAAC,CAAC;YACvD,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC,WAAW,IAAI,mCAAmC,CAAC;YACrE,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC7B,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,WAAW,KAAK,kBAAkB,IAAI,CAAC,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,mBAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YACrH,CAAC;YACD,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC;gBACnB,CAAC,CAAC,GAAG,GAAG,mBAAW,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;gBACnC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;YAClB,CAAC;QACL,CAAC;QACD,CAAC,CAAC,IAAI,EAAE,CAAC;QACT,MAAM,CAAC,CAAC,CAAC;IACb,CAAC;IAfD,uBAeC;IAED;;OAEG;IACH;QAAA;YAAA,iBAsOC;YA7EG;;;;eAIG;YACO,aAAQ,GAAG,UAAC,IAAwC,EAAE,aAAsB;gBAClF,IAAM,GAAG,GAAG,KAAI,CAAC,GAAG,CAAC;gBACrB,IAAI,CAAC;oBACD,uBAAuB;oBACvB,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,OAAO,IAAI,CAAC,aAAa,IAAI,GAAG,CAAC,UAAU,KAAK,CAAC,CAAC,CAAC,CAAC;wBAC1D,MAAM,CAAC;oBACX,CAAC;oBACD,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC;oBAErB,qCAAqC;oBACrC,GAAG,CAAC,kBAAkB,GAAG,IAAK,CAAC;oBAE/B,UAAU;oBACV,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;wBAChB,KAAI,CAAC,MAAM,GAAG,aAAa,CAAC;wBAC5B,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,KAAK,CAAC,CAAC,CAAC,CAAC;4BACvB,GAAG,CAAC,KAAK,EAAE,CAAC;wBAChB,CAAC;oBACL,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,KAAI,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBAC/C,IAAI,CAAC;4BACD,MAAM,CAAC,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC,CAAC;gCACxB,KAAK,SAAS,CAAC;gCACf,KAAK,MAAM;oCACP,KAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,YAAY,CAAC;oCACjC,KAAK,CAAC;gCACV,KAAK,MAAM;oCACP,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;oCAC7C,KAAK,CAAC;gCACV,KAAK,UAAU;oCACX,KAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,WAAW,CAAC;oCAChC,KAAK,CAAC;gCACV;oCACI,KAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC;oCAC7B,KAAK,CAAC;4BACd,CAAC;4BACD,IAAI,GAAG,SAAS,CAAC;wBACrB,CAAC;wBAAC,KAAK,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;4BACrB,YAAY;4BACZ,sBAAsB;4BACtB,KAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;4BACjB,KAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;4BAC1B,IAAI,GAAG,aAAa,CAAC;wBACzB,CAAC;oBACL,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,IAAI,GAAG,GAAG,CAAC,UAAU,IAAI,eAAe,CAAC;oBAC7C,CAAC;gBACL,CAAC;gBAAC,KAAK,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;oBAC1B,KAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC,CAAC;oBACtC,MAAM,CAAC;gBACX,CAAC;gBAED,QAAQ;gBACR,EAAE,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;oBACrB,KAAI,CAAC,OAAO,IAAI,KAAI,CAAC,OAAO,CAAC,KAAI,CAAC,QAAQ,EAAE,KAAI,CAAC,CAAC;gBACtD,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,KAAI,CAAC,KAAK,IAAI,KAAI,CAAC,KAAK,CAAC,IAAsB,EAAE,KAAI,CAAC,CAAC;gBAC3D,CAAC;gBACD,KAAI,CAAC,QAAQ,IAAI,KAAI,CAAC,QAAQ,CAAC,IAAsB,EAAE,KAAI,CAAC,CAAC;YACjE,CAAC,CAAA;QAcL,CAAC;QA9JG;;;;WAIG;QACH,gCAAiB,GAAjB,UAAkB,IAAY;YAC1B,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QACxD,CAAC;QAuBD;;;WAGG;QACH,mBAAI,GAAJ;YACI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;YAC5C,IAAI,CAAC;gBACD,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtE,CAAC;YAAC,KAAK,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;gBACnB,kBAAkB;gBAClB,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC/B,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;YAED,GAAG,CAAC,CAAC,IAAM,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBAChC,IAAI,CAAC;oBACD,GAAG,CAAC,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;gBACvD,CAAC;gBAAC,KAAK,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC;oBAC7B,mBAAmB;gBACvB,CAAC;YACL,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBACnB,IAAI,CAAC;oBACD,GAAG,CAAC,gBAAgB,CAAC,cAAc,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC3D,CAAC;gBAAC,KAAK,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC;oBAC7B,mBAAmB;gBACvB,CAAC;YACL,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;gBACvB,GAAG,CAAC,eAAe,GAAG,IAAI,CAAC;YAC/B,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,YAAY,KAAK,aAAa,IAAI,IAAI,CAAC,YAAY,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC7F,GAAG,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;YACzC,CAAC;YAED,IAAI,CAAC;gBACD,GAAG,CAAC,kBAAkB,GAAG,IAAI,CAAC,QAAQ,CAAC;gBACvC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxB,CAAC;YAAC,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACjB,cAAc;gBACd,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC7B,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;gBACpB,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;YAC3D,CAAC;YAED,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAwED;;WAEG;QACH,oBAAK,GAAL;YACI,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC;QAEL,WAAC;IAAD,CAAC,AAtOD,IAsOC;IAtOY,oBAAI;IAwOjB,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,KAAK,CAAC;IAC5B,IAAI,CAAC,SAAS,CAAC,GAAG,GAAG,EAAE,CAAC;IAExB;;;;OAIG;IACH,qBAA4B,MAAc;QACtC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACV,IAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;YAC1C,sBAAsB;YACtB,MAAM,CAAC,QAAQ,KAAK,OAAO,IAAI,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,MAAM,CAAC;QACjF,CAAC;QACD,MAAM,CAAC,MAAM,IAAI,GAAG,IAAI,MAAM,GAAG,GAAG,IAAI,MAAM,KAAK,GAAG,IAAI,MAAM,KAAK,IAAI,CAAC;IAC9E,CAAC;IAPD,kCAOC"}