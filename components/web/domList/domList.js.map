{"version":3,"file":"domList.js","sources":["domList.ts"],"sourcesContent":["import * as dom from \"web/dom\";\r\n\r\n/**\r\n * 查找 CSS 选择器匹配的所有元素。\r\n * @param selector 要执行的选择器。\r\n * @param context 要查询的根节点。\r\n * @return 返回新列表。\r\n */\r\nexport default function $(selector: string, context?: Document | Node): DomList;\r\n\r\n/**\r\n * 解析指定的 HTML 片段。\r\n * @param html 要解析的 HTML 片段。\r\n * @param context 用于创建新节点的文档。\r\n * @return 返回新列表。\r\n */\r\nexport default function $(html: string, context?: Document): DomList;\r\n\r\n/**\r\n * 创建一个空列表。\r\n * @return 返回新列表。\r\n */\r\nexport default function $(): DomList;\r\n\r\n/**\r\n * 创建仅包含指定节点的列表。\r\n * @param node 节点或窗口对象。\r\n * @return 返回新列表。\r\n */\r\nexport default function $(node: Node | Window | null | undefined): DomList;\r\n\r\n/**\r\n * 创建和已有列表包含相同元素的新列表。\r\n * @param nodeList 节点数组或节点列表。\r\n * @return 返回新列表。\r\n */\r\nexport default function $(nodeList: ArrayLike<Node | Window>): DomList;\r\n\r\n/**\r\n * 设置文档加载完成后的回调。\r\n * @param ready 要设置的回调函数。\r\n * @param context 文档。\r\n * @return 返回一个空列表。\r\n */\r\nexport default function $(ready: () => void, context?: Document): DomList;\r\n\r\nexport default function $(selector?: any, context?: Node | Document) {\r\n    return new (DomList as any)(selector, context) as DomList;\r\n}\r\n\r\n/**\r\n * 表示一个元素列表。\r\n */\r\nexport function DomList(this: DomList, selector?: any, context?: any) {\r\n    if (typeof selector === \"string\") {\r\n        if (selector.charCodeAt(0) === 60/* < */) {\r\n            const parsed = dom.parse(selector, context);\r\n            if (parsed.nodeType === 11 /* DocumentFragment */) {\r\n                for (let child = parsed.firstChild; child; child = child.nextSibling) {\r\n                    this.push(child as HTMLElement);\r\n                }\r\n            } else {\r\n                this.push(parsed as HTMLElement);\r\n            }\r\n        } else {\r\n            const list = (context || document).querySelectorAll(selector);\r\n            for (let i = 0, length = list.length; i < length; i++) {\r\n                this.push(list[i] as HTMLElement);\r\n            }\r\n        }\r\n    } else if (typeof selector === \"function\") {\r\n        dom.ready(selector, context);\r\n    } else if (selector != null) {\r\n        if (typeof selector.nodeType === \"number\" || selector === selector.window) {\r\n            this.push(selector);\r\n        } else if (typeof selector.length === \"number\") {\r\n            for (let i = 0; i < selector.length; i++) {\r\n                if (selector[i] != null) {\r\n                    this.push(selector[i]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport interface DomList {\r\n\r\n    /**\r\n     * 元素个数。\r\n     */\r\n    length: number;\r\n\r\n    /**\r\n     * 获取或设置指定索引的元素。\r\n     */\r\n    [index: number]: HTMLElement;\r\n\r\n    /**\r\n     * 向列表末尾添加新元素。\r\n     * @param elems 要添加的元素。\r\n     * @return 返回新长度。\r\n     */\r\n    push(...elems: HTMLElement[]): number;\r\n\r\n    /**\r\n     * 移除并返回列表末尾的元素。\r\n     * @return 返回元素。\r\n     */\r\n    pop(): HTMLElement | undefined;\r\n\r\n    /**\r\n     * 向列表开头添加新元素。\r\n     * @param elems 要添加的元素。\r\n     * @return 返回新长度。\r\n     */\r\n    unshift(...elems: HTMLElement[]): number;\r\n\r\n    /**\r\n     * 移除并返回列表开头的元素。\r\n     * @return 返回元素。\r\n     */\r\n    shift(): HTMLElement | undefined;\r\n\r\n    /**\r\n     * 获取列表的指定位置的子列表。\r\n     * @param start 要获取的开始索引（含）。\r\n     * @param end 要获取的结束索引（不含）。\r\n     * @return 返回新列表。\r\n     */\r\n    slice(start?: number, end?: number): DomList;\r\n\r\n    /**\r\n     * 移除或插入列表的指定元素。\r\n     * @param index 要移除或插入的索引。\r\n     * @param removeCount 要移除的数目。如果为 0 则不移除。\r\n     * @param insertItems 所有要插入的元素。\r\n     * @return 返回被删除的元素所组成的数组。\r\n     */\r\n    splice(start: number, deleteCount: number, ...insertItems: HTMLElement[]): HTMLElement[];\r\n\r\n    /**\r\n     * 排序当前列表的元素。\r\n     * @param compareFn 用于排序时确定顺序的函数。函数接收以下参数：\r\n     * - x：要比较的第一个参数。\r\n     * - y：要比较的第二个参数。\r\n     *\r\n     * 如果返回 0 或负数，则说明 *x* 应该排在 *y* 之前。否则 *x* 应该排在 *y* 之后。\r\n     */\r\n    sort(compareFn: (x: HTMLElement, y: HTMLElement) => number): this;\r\n\r\n    /**\r\n     * 颠倒所有元素的顺序。\r\n     */\r\n    reverse(): this;\r\n\r\n    /**\r\n     * 查找指定项在数组内的第一个索引。\r\n     * @param value 要查找的项。\r\n     * @param startIndex 查找开始的位置。\r\n     * @return 返回索引。如果找不到则返回 -1。\r\n     */\r\n    indexOf(value: HTMLElement, startIndex?: number): number;\r\n\r\n    /**\r\n     * 查找指定项在数组内的最后一个索引。\r\n     * @param value 要查找的项。\r\n     * @param startIndex 查找开始的位置。\r\n     * @return 返回索引。如果找不到则返回 -1。\r\n     */\r\n    lastIndexOf(value: HTMLElement, startIndex?: number): number;\r\n\r\n    /**\r\n     * 对列表的每一项执行一次回调函数。\r\n     * @param callback 回调函数。函数接收以下参数：\r\n     * - value：当前项的值。\r\n     * - index：当前项的索引。\r\n     * - target：数组本身。\r\n     * @param thisArg 执行回调函数时 this 的值。\r\n     */\r\n    each(callback: (elem: HTMLElement, index: number, target: this) => void, thisArg?: any): this;\r\n\r\n    /**\r\n     * 对列表的每一项执行一次回调函数，然后将每个结果组成新数组。\r\n     * @param callback 回调函数。函数接收以下参数：\r\n     * - value：当前项的值。\r\n     * - index：当前项的索引。\r\n     * - target：数组本身。\r\n     *\r\n     * 函数应返回新的结果。\r\n     * @param thisArg 执行回调函数时 this 的值。\r\n     */\r\n    map(callback: (elem: HTMLElement, index: number, target: this) => any, thisArg?: any): DomList;\r\n\r\n    /**\r\n     * 筛选数组中符合条件的项并组成一个新数组。\r\n     * @param callback 用于确定每一项是否符合条件的回调函数。函数接收以下参数：\r\n     * - value：当前项的值。\r\n     * - index：当前项的索引。\r\n     * - target：数组本身。\r\n     *\r\n     * 如果当前项符合条件应返回 true，否则返回 false。\r\n     * @param thisArg 执行回调函数时 this 的值。\r\n     * @return 返回一个新列表。\r\n     */\r\n    filter(callback: (elem: HTMLElement, index: number, target: this) => void, thisArg?: any): DomList;\r\n\r\n    /**\r\n     * 筛选数组中匹配指定 CSS 选择器的项并组成一个新数组。\r\n     * @param selector CSS 选择器。\r\n     * @return 返回一个新列表。\r\n     */\r\n    filter(selector: string): DomList;\r\n\r\n    /**\r\n     * 判断数组的每一项是否都符合条件。\r\n     * @param callback 用于确定每一项是否符合条件的回调函数。函数接收以下参数：\r\n     * - value：当前项的值。\r\n     * - index：当前项的索引。\r\n     * - target：数组本身。\r\n     *\r\n     * 如果当前项符合条件应返回 true，否则返回 false。\r\n     * @param thisArg 执行回调函数时 this 的值。\r\n     * @return 如果所有项满足条件则返回 true，否则返回 false。\r\n     */\r\n    every(callback: (elem: HTMLElement, index: number, target: this) => void, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * 判断数组中是否存在一项或多项符合条件。\r\n     * @param callback 用于确定每一项是否符合条件的回调函数。函数接收以下参数：\r\n     * - value：当前项的值。\r\n     * - index：当前项的索引。\r\n     * - target：数组本身。\r\n     *\r\n     * 如果当前项符合条件应返回 true，否则返回 false。\r\n     * @param thisArg 执行回调函数时 this 的值。\r\n     * @return 如果至少存在一项满足条件则返回 true，否则返回 false。\r\n     */\r\n    some(callback: (elem: HTMLElement, index: number, target: this) => void, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * 向列表末尾添加新元素。\r\n     * @param items 要添加的所有元素或选择器。\r\n     */\r\n    add(...items: (string | Node | Window | ArrayLike<Node | Window>)[]): this;\r\n\r\n    /**\r\n     * 在当前节点内查询 CSS 选择器匹配的所有节点。\r\n     * @param selector 用于筛选元素的 CSS 选择器。\r\n     */\r\n    find(selector: string): DomList;\r\n\r\n    /**\r\n     * 判断是否有一个或多个元素匹配指定的 CSS 选择器。\r\n     * @param selector 要判断的 CSS 选择器。\r\n     * @return 返回包含所有元素的新列表。\r\n     */\r\n    match(selector: string): boolean;\r\n\r\n    /**\r\n     * 获取每个节点的下一个相邻元素。\r\n     * @param selector 用于筛选元素的 CSS 选择器。\r\n     * @return 返回包含所有元素的新列表。\r\n     */\r\n    next(selector?: string): NodeList;\r\n\r\n    /**\r\n     * 获取每个节点的上一个相邻元素。\r\n     * @param selector 用于筛选元素的 CSS 选择器。\r\n     * @return 返回包含所有元素的新列表。\r\n     */\r\n    prev(selector?: string): NodeList;\r\n\r\n    /**\r\n     * 获取每个节点的父元素。\r\n     * @param selector 用于筛选元素的 CSS 选择器。\r\n     * @return 返回包含所有元素的新列表。\r\n     */\r\n    parent(selector?: string): NodeList;\r\n\r\n    /**\r\n     * 从每个节点开始向父元素查找第一个匹配指定 CSS 选择器的元素。\r\n     * @param selector 用于筛选元素的 CSS 选择器。\r\n     * @return 返回包含所有元素的新列表。\r\n     */\r\n    closest(selector?: string): NodeList;\r\n\r\n    /**\r\n     * 获取每个节点的所有子元素。\r\n     * @param selector 用于筛选元素的 CSS 选择器。\r\n     * @return 返回包含所有元素的新列表。\r\n     */\r\n    children(selector?: string): NodeList;\r\n\r\n    /**\r\n     * 在每个节点末尾插入一段 HTML 或一个节点。\r\n     * @param content 要插入的 HTML 或节点。\r\n     */\r\n    append(content: string | Node | ArrayLike<HTMLElement> | null): this;\r\n\r\n    /**\r\n     * 在每个节点开头插入一段 HTML 或一个节点。\r\n     * @param content 要插入的 HTML 或节点。\r\n     */\r\n    prepend(content: string | Node | ArrayLike<HTMLElement> | null): this;\r\n\r\n    /**\r\n     * 在每个节点前插入一段 HTML 或一个节点。\r\n     * @param content 要插入的 HTML 或节点。\r\n     */\r\n    before(content: string | Node | ArrayLike<HTMLElement> | null): this;\r\n\r\n    /**\r\n     * 在每个节点后插入一段 HTML 或一个节点。\r\n     * @param content 要插入的 HTML 或节点。\r\n     */\r\n    after(content: string | Node | ArrayLike<HTMLElement> | null): this;\r\n\r\n    /**\r\n     * 将当前节点添加到目标节点的末尾。\r\n     * @param parent 要插入的目标节点。\r\n     */\r\n    appendTo(parent: string | Node | ArrayLike<HTMLElement> | null): this;\r\n\r\n    /**\r\n     * 从文档中移除列表中所有节点。\r\n     */\r\n    remove(): this;\r\n\r\n    /**\r\n     * 复制节点列表。\r\n     * @return 返回复制的新列表。\r\n     */\r\n    clone(): NodeList;\r\n\r\n    /**\r\n     * 获取列表中第一个元素的属性值。\r\n     * @param attrName 要获取的属性名（使用骆驼规则，如 `readOnly`）。\r\n     * @return 返回属性值。如果属性不存在则返回 null。\r\n     */\r\n    attr(attributeName: string): string;\r\n\r\n    /**\r\n     * 设置列表中每个元素的属性值。\r\n     * @param attrName 要获取的属性名（使用骆驼规则，如 `readOnly`）。\r\n     * @param value 要设置的属性值。设置为 null 表示删除属性。\r\n     */\r\n    attr(attributeName: string, value: string | number): this;\r\n\r\n    /**\r\n     * 设置列表中每个元素的属性值。\r\n     * @param attributes 要获取的属性键值对。\r\n     */\r\n    attr(attributes: Object): this;\r\n\r\n    /**\r\n     * 获取列表中第一个元素的值。\r\n     * @return 返回属性值。如果属性不存在则返回 null。\r\n     */\r\n    val(): string;\r\n\r\n    /**\r\n     * 设置列表中每个元素的值。\r\n     * @param value 要设置的值。\r\n     */\r\n    val(value: any): this;\r\n\r\n    /**\r\n     * 获取列表中第一个元素的文本内容。\r\n     * @return 返回属性值。如果属性不存在则返回 null。\r\n     */\r\n    text(): string;\r\n\r\n    /**\r\n     * 设置列表中每个元素的文本内容。\r\n     * @param value 要设置的值。\r\n     */\r\n    text(value: any): this;\r\n\r\n    /**\r\n     * 获取列表中第一个元素的 HTML 内容。\r\n     * @return 返回属性值。如果属性不存在则返回 null。\r\n     */\r\n    html(): string;\r\n\r\n    /**\r\n     * 设置列表中每个元素的文本内容。\r\n     * @param value 要设置的值。\r\n     */\r\n    html(value: any): this;\r\n\r\n    /**\r\n     * 判断是否存在一个元素已添加指定的 CSS 类名。\r\n     * @param className 要判断的 CSS 类名。如果有多个用空格隔开。\r\n     * @return 如果已添加则返回 true，否则返回 false。\r\n     */\r\n    hasClass(className: string): boolean;\r\n\r\n    /**\r\n     * 添加所有元素的 CSS 类名。\r\n     * @param className 要添加的 CSS 类名。如果有多个用空格隔开。\r\n     */\r\n    addClass(className: string): this;\r\n\r\n    /**\r\n     * 删除所有元素的 CSS 类名。\r\n     * @param className 要删除的 CSS 类名。如果有多个用空格隔开。如果为空则删除所有类名。\r\n     */\r\n    removeClass(className?: string): this;\r\n\r\n    /**\r\n     * 如果存在（不存在）则删除（添加）所有元素的 CSS 类名。\r\n     * @param className 要添加或删除的 CSS 类名。如果有多个用空格隔开。\r\n     */\r\n    toggleClass(className: string): this;\r\n\r\n    /**\r\n     * 获取列表中第一个元素的 CSS 属性值。\r\n     * @param propName 要获取的 CSS 属性名（使用骆驼规则，如 `fontSize`）。\r\n     * @return 返回计算后的 CSS 属性值。\r\n     */\r\n    css(propName: string): this;\r\n\r\n    /**\r\n     * 设置列表中每个元素的 CSS 属性值。\r\n     * @param propName 要设置的 CSS 属性名（使用骆驼规则，如 `fontSize`）。\r\n     * @param value 要设置的 CSS 属性值。如果是数字则自动追加像素单位。\r\n     */\r\n    css(propName: string, value: string | number): this;\r\n\r\n    /**\r\n     * 设置列表中每个元素的 CSS 属性值。\r\n     * @param cssProps 要设置的 CSS 属性键值对。\r\n     */\r\n    css(cssProps: Object): this;\r\n\r\n    /**\r\n     * 获取列表中第一个元素的滚动距离。\r\n     * @return 返回坐标。如果元素不可滚动则返回原点。\r\n     */\r\n    scroll(): this;\r\n\r\n    /**\r\n     * 设置列表中每个元素的滚动距离。\r\n     * @param propName 要设置的 CSS 属性名（使用骆驼规则，如 `fontSize`）。\r\n     * @param value 要设置的坐标。允许只设置部分属性。\r\n     */\r\n    scroll(value: dom.Point): this;\r\n\r\n    /**\r\n     * 获取列表中第一个元素的区域。\r\n     * @return 返回元素实际占用区域（含内边距和边框、不含外边距）。如果元素不可见则返回空区域。\r\n     */\r\n    rect(): this;\r\n\r\n    /**\r\n     * 设置列表中每个元素的区域。\r\n     * @param propName 要设置的 CSS 属性名（使用骆驼规则，如 `fontSize`）。\r\n     * @param value 要设置的区域内容（含内边距和边框、不含外边距）。允许只设置部分属性。\r\n     */\r\n    rect(value: dom.Rect): this;\r\n\r\n    /**\r\n     * 绑定每个元素的事件。\r\n     * @param eventName 要绑定的事件名。\r\n     * @param selector 要委托的目标元素的 CSS 选择器。\r\n     * @param handler 要绑定的事件处理函数。\r\n     * @param thisArg 设置监听器执行时 this 的值。\r\n     * @example on(document.body, \"mouseenter\", \"a\", function(e){ this.firstChild.innerHTML = e.pageX; })\r\n     */\r\n    on(eventName: string, selector: string, handler: (e: Event, target: HTMLElement) => void, thisArg?: any): this;\r\n\r\n    /**\r\n     * 解绑每个元素的事件。\r\n     * @param eventName 要解绑的事件名。\r\n     * @param selector 要委托的目标元素的 CSS 选择器。\r\n     * @param handler 要解绑的事件处理函数。如果未提供则解绑所有监听器。\r\n     * @param thisArg 设置监听器执行时 this 的值。\r\n     * @example off(document.body, \"mouseenter\", \"a\", function(e) { this.firstChild.innerHTML = e.pageX; })\r\n     */\r\n    off(eventName: string, selector: string, handler: (e: Event, target: HTMLElement) => void, thisArg?: any): this;\r\n\r\n    /**\r\n     * 触发每个元素的指定事件，即执行对应已添加的所有事件处理函数。\r\n     * @param eventName 要触发的事件名。\r\n     * @param selector 要委托的目标元素的 CSS 选择器。\r\n     * @param event 传递给监听器的事件参数。\r\n     * @example trigger(document.body, \"click\")\r\n     */\r\n    trigger(eventName: string, selector: string, event?: Partial<Event>): this;\r\n\r\n    /**\r\n     * 触发每个元素的指定事件，即执行对应已添加的所有事件处理函数。\r\n     * @param eventName 要触发的事件名。\r\n     * @param event 传递给监听器的事件参数。\r\n     * @example trigger(document.body, \"click\")\r\n     */\r\n    trigger(eventName: string, selector: string, event?: Partial<Event>): this;\r\n\r\n    /**\r\n     * 执行一个自定义渐变。\r\n     * @param propNames 要渐变的 CSS 属性名和最终的属性值组成的键值对。\r\n     * @param callback 渐变执行结束的回调函数。\r\n     * @param duration 渐变执行的总毫秒数。\r\n     * @param timingFunction 渐变函数。可以使用 CSS3 预设的特效渐变函数。\r\n     * @example animate(document.body, { height: 400 });\r\n     */\r\n    animate(propNames: { [propName: string]: string | number }, callback?: () => void, duration?: number, timingFunction?: string): this;\r\n\r\n    /**\r\n     * 显示元素。\r\n     * @param animation 显示时使用的动画。\r\n     * @param callback 动画执行完成后的回调。\r\n     * @param duration 动画执行的总毫秒数。\r\n     * @param timingFunction 渐变函数。可以使用 CSS3 预设的特效渐变函数。\r\n     * @param target 动画的目标元素。\r\n     */\r\n    show(animation?: dom.ToggleAnimation, callback?: (value: boolean) => void, duration?: number, timingFunction?: string, target?: HTMLElement): this;\r\n\r\n    /**\r\n     * 隐藏元素。\r\n     * @param animation 显示时使用的动画。\r\n     * @param callback 动画执行完成后的回调。\r\n     * @param duration 动画执行的总毫秒数。\r\n     * @param timingFunction 渐变函数。可以使用 CSS3 预设的特效渐变函数。\r\n     * @param target 动画的目标元素。\r\n     */\r\n    hide(animation?: dom.ToggleAnimation, callback?: (value: boolean) => void, duration?: number, timingFunction?: string, target?: HTMLElement): this;\r\n\r\n    /**\r\n     * 切换显示或隐藏元素。\r\n     * @param animation 显示时使用的动画。\r\n     * @param callback 动画执行完成后的回调。\r\n     * @param duration 动画执行的总毫秒数。\r\n     * @param timingFunction 渐变函数。可以使用 CSS3 预设的特效渐变函数。\r\n     * @param target 动画的目标元素。\r\n     */\r\n    toggle(animation?: dom.ToggleAnimation, callback?: (value: boolean) => void, duration?: number, timingFunction?: string, target?: HTMLElement): this;\r\n\r\n    /**\r\n     * 切换显示或隐藏元素。\r\n     * @param value 如果为 true 则强制显示元素；如果为 false 则强制隐藏元素。\r\n     * @param animation 显示或隐藏时使用的动画。\r\n     * @param callback 动画执行完成后的回调。\r\n     * @param duration 动画执行的总毫秒数。\r\n     * @param timingFunction 渐变函数。可以使用 CSS3 预设的特效渐变函数。\r\n     * @param target 动画的目标元素。\r\n     */\r\n    toggle(value: boolean, animation?: dom.ToggleAnimation, callback?: (value: boolean) => void, duration?: number, timingFunction?: string, target?: HTMLElement): this;\r\n\r\n    /**\r\n     * 触发每个元素的点击事件。\r\n     */\r\n    click(): this;\r\n\r\n    /**\r\n     * 绑定每个元素的点击事件。\r\n     * @param handler 事件处理函数。\r\n     */\r\n    click(handler: (e: MouseEvent, sender: HTMLElement) => void): this;\r\n\r\n    /**\r\n     * 触发每个元素的获取焦点事件。\r\n     */\r\n    focus(): this;\r\n\r\n    /**\r\n     * 绑定每个元素的获取焦点事件。\r\n     * @param handler 事件处理函数。\r\n     */\r\n    focus(handler: (e: UIEvent, sender: HTMLElement) => void): this;\r\n\r\n    /**\r\n     * 触发每个元素的失去焦点事件。\r\n     */\r\n    blur(): this;\r\n\r\n    /**\r\n     * 绑定每个元素的失去焦点事件。\r\n     * @param handler 事件处理函数。\r\n     */\r\n    blur(handler: (e: UIEvent, sender: HTMLElement) => void): this;\r\n\r\n    /**\r\n     * 触发每个元素的表单提交事件。\r\n     */\r\n    submit(): this;\r\n\r\n    /**\r\n     * 绑定每个元素的表单提交事件。\r\n     * @param handler 事件处理函数。\r\n     */\r\n    submit(handler: (e: UIEvent, sender: HTMLElement) => void): this;\r\n\r\n    /**\r\n     * 触发每个元素的选择事件。\r\n     */\r\n    select(): this;\r\n\r\n    /**\r\n     * 绑定每个元素的选择事件。\r\n     * @param handler 事件处理函数。\r\n     */\r\n    select(handler: (e: UIEvent, sender: HTMLElement) => void): this;\r\n\r\n}\r\n\r\n$.prototype = DomList.prototype = {\r\n\r\n    constructor: $,\r\n\r\n    each(this: DomList, callback: (elem: HTMLElement, index: number, target: DomList) => void, thisArg?: any) {\r\n        for (let i = 0; i < this.length; i++) {\r\n            callback.call(thisArg, this[i], i, this);\r\n        }\r\n        return this;\r\n    },\r\n\r\n    add(this: DomList) {\r\n        for (let argument of arguments) {\r\n            argument = $(argument);\r\n            for (let i = 0; i < argument.length; i++) {\r\n                const item = argument[i];\r\n                if (this.indexOf(item) < 0) {\r\n                    this.push(item);\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    },\r\n\r\n    find(this: DomList, selector: string) {\r\n        const r = $();\r\n        this.each(elem => {\r\n            r.add(elem.querySelectorAll(selector));\r\n        });\r\n        return r;\r\n    },\r\n\r\n    filter(this: DomList, selector: any, thisArg?: any) {\r\n        if (typeof selector !== \"function\") {\r\n            const original = selector;\r\n            selector = (elem: any) => dom.match(elem, selector);\r\n        }\r\n        return Array.prototype.filter.call(this, selector, thisArg);\r\n    },\r\n\r\n    match(this: DomList, selector: string) {\r\n        return this.some(elem => dom.match(elem, selector));\r\n    },\r\n\r\n    appendTo(this: DomList, parent: any) {\r\n        $(parent).append(this);\r\n        return this;\r\n    },\r\n\r\n    hasClass(this: DomList, className: string) {\r\n        return this.some(elem => className.split(\" \").some(clazz => dom.hasClass(elem, clazz)));\r\n    },\r\n\r\n    addClass(this: DomList, className: string) {\r\n        return this.each(elem => {\r\n            className.split(\" \").forEach(clazz => dom.addClass(elem, clazz));\r\n        });\r\n    },\r\n\r\n    removeClass(this: DomList, className?: string) {\r\n        return this.each(elem => {\r\n            if (className) {\r\n                className.split(\" \").forEach(clazz => dom.removeClass(elem, clazz));\r\n            } else {\r\n                elem.className = \"\";\r\n            }\r\n        });\r\n    },\r\n\r\n    toggleClass(this: DomList, className: string, value?: boolean) {\r\n        return this.each(elem => {\r\n            className.split(\" \").forEach(clazz => dom.toggleClass(elem, clazz, value));\r\n        });\r\n    }\r\n\r\n};\r\n\r\nfunction defineMethods(fnNames: string, factory: (fnName: string) => (this: DomList, ...args: any[]) => any) {\r\n    fnNames.replace(/\\w+/g, ((fnName: string) => {\r\n        DomList.prototype[fnName] = factory(fnName);\r\n    }) as any);\r\n}\r\n\r\ndefineMethods(\"length push pop unshift shift splice sort reverse indexOf lastIndexOf every some\", fnName => Array.prototype[fnName as any]);\r\ndefineMethods(\"slice map\", fnName => function () {\r\n    return $(Array.prototype[fnName as any].apply(this, arguments));\r\n});\r\ndefineMethods(\"next prev parent closest clone\", fnName => function (selector: any) {\r\n    return $().add(this.map(elem => (dom as any)[fnName](elem, selector)));\r\n});\r\ndefineMethods(\"children\", fnName => function (selector: any) {\r\n    const r = $();\r\n    this.each(elem => {\r\n        r.add((dom as any)[fnName](elem, selector));\r\n    });\r\n    return r;\r\n});\r\ndefineMethods(\"append prepend before after\", fnName => function (content: any) {\r\n    if (typeof content === \"object\") {\r\n        if (this.length) {\r\n            content = $(content, this[0].ownerDocument || (this[0] as any).document || this[0]);\r\n            if (content.length) {\r\n                this.each((elem, index) => {\r\n                    const current = index === 0 ? content : content.clone();\r\n                    const newNode = (dom as any)[fnName](elem, current[0]);\r\n                    for (let i = 1; i < current.length; i++) {\r\n                        dom.after(newNode, current[i]);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    return this.each(elem => (dom as any)[fnName](elem, content));\r\n});\r\ndefineMethods(\"remove on off trigger animate show hide toggle\", fnName => function () {\r\n    return this.each(elem => (dom as any)[fnName](elem, ...arguments));\r\n});\r\ndefineMethods(\"attr css\", fnName => function (name: any, value: any) {\r\n    const domFnName = fnName === \"css\" ? \"Style\" : \"Attr\";\r\n    if (typeof name === \"object\") {\r\n        for (const key in name) {\r\n            this.each(elem => (dom as any)[\"set\" + domFnName](elem, key, name[key]));\r\n        }\r\n        return this;\r\n    }\r\n    if (value === undefined) {\r\n        return this.length ? (dom as any)[\"get\" + domFnName](this[0], name) : undefined;\r\n    }\r\n    return this.each(elem => (dom as any)[\"set\" + domFnName](elem, name, value));\r\n});\r\ndefineMethods(\"text html scroll rect\", fnName => function (value: any) {\r\n    const domFnName = fnName.charAt(0).toUpperCase() + fnName.slice(1);\r\n    if (value === undefined) {\r\n        return this.length ? (dom as any)[\"get\" + domFnName](this[0]) : undefined;\r\n    }\r\n    return this.each(elem => (dom as any)[\"set\" + domFnName](elem, value));\r\n});\r\ndefineMethods(\"val\", fnName => DomList.prototype.text);\r\ndefineMethods(\"click focus blur submit select\", fnName => function (handler: any) {\r\n    return this.each(elem => {\r\n        if (handler === undefined) {\r\n            if ((elem as any)[fnName]) {\r\n                (elem as any)[fnName]();\r\n            } else {\r\n                dom.trigger(elem, fnName);\r\n            }\r\n        } else {\r\n            dom.on(elem, fnName, handler);\r\n        }\r\n    });\r\n});\r\n"],"mappings":"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"}