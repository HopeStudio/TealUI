{"version":3,"file":"string.js","sources":["string.ts"],"sourcesContent":["/**\r\n * 格式化字符串。\r\n * @param formatString 格式字符串。其中以下内容会被替换：\r\n *\r\n * 元字符   | 意义      | 示例\r\n * --------|-----------|--------\r\n * {数字}   | 替换为参数列表 | 如 `String.format(\"{0}年{1}月{2}日\", 2012, 12, 3)` 中，{0} 被替换成 2012，{1} 被替换成 12 ，依次类推。\r\n * {字符串} | 替换为参数对象 | 如 `String.format(\"{year}年{month} 月 \", {year: 2012, month:12})`。\r\n * {{      | 被替换为 { |\r\n * }}      | 被替换为 } |\r\n *\r\n * @param args 所有格式化参数。\r\n * @return 返回格式化后的字符串。\r\n * @example format(\"我是{0}，不是{1}\", \"小黑\", \"大白\") // \"我是小黑，不是大白\"\r\n * @example format(\"我是{xiaohei}，不是{dabai}\", {xiaohei: \"小黑\", dabai: \"大白\"}) // \"我是小黑，不是大白\"\r\n * @example format(\"在字符串内使用两个{{和}}避免被转换\") //  \"在字符串内使用两个{和}避免被转换\"\r\n */\r\nexport function format(formatString: string, ...args: any[]) {\r\n    return formatString ? formatString.replace(/\\{\\{|\\{(.+?)\\}|\\}\\}/g, (source: string, argName: string) => {\r\n        if (argName == undefined) {\r\n            return source.charAt(0);\r\n        }\r\n        argName = +argName >= 0 ? args[argName as any] : args[0][argName];\r\n        return argName == undefined ? \"\" : argName;\r\n    }) : \"\";\r\n}\r\n\r\n/**\r\n * 判断对象是否是字符串。\r\n * @param obj 要判断的对象。\r\n * @return 如果 obj 是字符串则返回 true，否则返回 false。\r\n * @example isString(\"\") // true\r\n */\r\nexport function isString(obj: any): obj is string {\r\n    return typeof obj === \"string\";\r\n}\r\n\r\n/**\r\n * 截断字符串超出长度的部分。\r\n * @param str 字符串。\r\n * @param length 最终期望的最大长度。\r\n * @param append 如果字符串超出长度则自动追加的符号。\r\n * @return 返回处理后的字符串。\r\n * @example trunc(\"1234567\", 6) // \"123...\"\r\n * @example trunc(\"1234567\", 9) // \"1234567\"\r\n */\r\nexport function trunc(str: string, length: number, append = \"...\") {\r\n    return str ? str.length > length ? str.substr(0, length - append.length) + append : str : \"\";\r\n}\r\n\r\n/**\r\n * 截断字符串超出长度的部分，并确保不强制截断单词。\r\n * @param str 字符串。\r\n * @param length 最终期望的最大长度。\r\n * @param append 如果字符串超出长度则自动追加的符号。\r\n * @return 返回处理后的字符串。\r\n * @example truncByWord(\"abc def\", 6) //   \"abc...\"\r\n */\r\nexport function truncByWord(str: string, length: number, append = \"...\") {\r\n    if (str && str.length > length) {\r\n        length -= append.length;\r\n        if (/[\\x00-\\xff]/.test(str.charAt(length))) {\r\n            const p = str.lastIndexOf(\" \", length);\r\n            if (p !== -1) {\r\n                length = p;\r\n            }\r\n        }\r\n        str = str.substr(0, length) + append;\r\n    }\r\n    return str || \"\";\r\n}\r\n\r\n/**\r\n * 判断字符串是否包含指定的单词。\r\n * @param str 字符串。\r\n * @param value 要判断的单词。\r\n * @param separator 单词的分割符。\r\n * @return 如果包含指定的单词则返回 true，否则返回 false。\r\n * @example containsWord(\"abc ab\", \"ab\")\r\n */\r\nexport function containsWord(str: string, value: string, separator = \" \") {\r\n    separator = separator || \" \";\r\n    return (separator ? (separator + str + separator) : str).indexOf(value) >= 0;\r\n}\r\n\r\n/**\r\n * 删除字符串每行的公共缩进部分。\r\n * @param str 字符串。\r\n * @return 返回新字符串。\r\n * @example removeLeadingWhiteSpaces(\"  a\") // \"a\"\r\n */\r\nexport function removeLeadingWhiteSpaces(str: string) {\r\n    str = str.replace(/^[\\r\\n]+/, \"\").replace(/\\s+$/, \"\");\r\n    const match = /^\\s+/.exec(str);\r\n    if (match) {\r\n        const space = match[0];\r\n        const t = str.split(/[\\r\\n]/);\r\n        for (let i = t.length - 1; i >= 0; i--) {\r\n            t[i] = t[i].replace(space, \"\");\r\n        }\r\n        str = t.join(\"\\n\");\r\n    }\r\n    return str;\r\n}\r\n\r\n/**\r\n * 替换字符串内指定的子字符串，如果出现多次则全部替换。\r\n * @param str 字符串。\r\n * @param from 要替换的子字符串。\r\n * @param to 要替换的目标字符串。\r\n * @return 返回新字符串。\r\n * @example replaceAll(\"1121\", \"1\", \"3\") // \"3323\"\r\n */\r\nexport function replaceAll(str: string, from: string, to: string) {\r\n    for (let p = 0; (p = str.indexOf(from, p)) >= 0; p += to.length) {\r\n        str = str.replace(from, to);\r\n    }\r\n    return str;\r\n}\r\n\r\n/**\r\n * 删除字符串内的所有空白符号。\r\n * @param str 字符串。\r\n * @return 返回新字符串。\r\n * @example clean(\" a b   \") // \"ab\"\r\n */\r\nexport function clean(str: string) {\r\n    return str.replace(/\\s+/g, \"\");\r\n}\r\n\r\n/**\r\n * 计算字符串按字节计算的长度（英文算一个字符，中文算两个个字符）。\r\n * @param str 字符串。\r\n * @return 返回长度值。\r\n * @example byteLength(\"a中文\") // 5\r\n */\r\nexport function byteLength(str: string) {\r\n    const arr = str.match(/[^\\x00-\\xff]/g);\r\n    return str.length + (arr ? arr.length : 0);\r\n}\r\n\r\n/**\r\n * 将字符串首字母大写。\r\n * @param str 字符串。\r\n * @return 返回新字符串。\r\n * @example capitalize(\"qwert\") // \"Qwert\"\r\n */\r\nexport function capitalize(str: string) {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n}\r\n\r\n/**\r\n * 将字符串首字母小写。\r\n * @param str 字符串。\r\n * @return 返回新字符串。\r\n * @example uncapitalize(\"Qwert\") // \"qwert\"\r\n */\r\nexport function uncapitalize(str: string) {\r\n    return str.charAt(0).toLowerCase() + str.slice(1);\r\n}\r\n\r\n/**\r\n * 将字符串转为骆驼规则（如 fontSize）。\r\n * @param str 字符串。\r\n * @return 返回新字符串。\r\n * @example toCamelCase(\"font-size\") // \"fontSize\"\r\n */\r\nexport function toCamelCase(str: string) {\r\n    return str.replace(/-(\\w)/g, (all, word: string) => word.toUpperCase());\r\n}\r\n\r\n/**\r\n * 将字符串转为横线规则（如 font-size）。\r\n * @param str 字符串。\r\n * @return 返回新字符串。\r\n * @example toKebabCase(\"fontSize\") // \"font-size\"\r\n */\r\nexport function toKebabCase(str: string) {\r\n    return str.replace(/[A-Z]/g, all => `-${all.toLowerCase()}`);\r\n}\r\n\r\n/**\r\n * 获取字符串中的所有单词。\r\n * @param str 字符串。\r\n * @return 返回所有单词组成的数组。\r\n * @example words(\"fontSize\") // [\"font\", \"size\"]\r\n */\r\nexport function words(str: string) {\r\n    const r: string[] = [];\r\n    str.replace(/[a-zA-Z][a-z]*/g, ((all: string) => {\r\n        r.push(all);\r\n    }) as any);\r\n    return r;\r\n}\r\n\r\n/**\r\n * 删除字符串内的重复字符。\r\n * @param str 字符串。\r\n * @return 返回新字符串。\r\n * @example unique(\"aabbcc\") // \"abc\"\r\n */\r\nexport function unique(str: string) {\r\n    let r = \"\";\r\n    for (const char of str) {\r\n        if (r.indexOf(char) < 0) {\r\n            r += char;\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 获取字符串左边指定长度的子字符串。\r\n * @param str 字符串。\r\n * @param length 要获取的子字符串长度。\r\n * @return 返回字符串左边指定长度的子字符串。\r\n * @example left(\"abcde\", 3) // \"abc\"\r\n */\r\nexport function left(str: string, length: number) {\r\n    return str.substr(0, length);\r\n}\r\n\r\n/**\r\n * 获取字符串右边指定长度的子字符串。\r\n * @param str 字符串。\r\n * @param length 要获取的子字符串长度。\r\n * @return 返回字符串右边指定长度的子字符串。\r\n * @example right(\"abcde\", 3) // \"cde\"\r\n */\r\nexport function right(str: string, length: number) {\r\n    return str.substr(str.length - length, length);\r\n}\r\n\r\n/**\r\n * 使用正则表达式匹配字符串并返回指定索引的匹配结果。\r\n * @param str 字符串。\r\n * @param re 要匹配的正则表达式。\r\n * @param index 要获取的匹配结果索引。\r\n * @return 返回匹配结果。如果正则表达式不匹配则返回 null。\r\n * @example match(\"abc\", /a(b)/, 1) // \"b\"\r\n */\r\nexport function match(str: string, re: RegExp, index = 0) {\r\n    const match = re.exec(str);\r\n    return match ? match[index] : null;\r\n}\r\n"],"mappings":"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"}