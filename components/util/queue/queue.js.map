{"version":3,"file":"queue.js","sources":["queue.ts"],"sourcesContent":["/**\r\n * 表示一个队列。\r\n */\r\nexport default class Queue<T> {\r\n\r\n    /**\r\n     * 将项添加到队列末尾。\r\n     * @param item 要添加的项。\r\n     */\r\n    enqueue(item: T) {\r\n        const last = this._last;\r\n        if (last) {\r\n            this._last = last.next = {\r\n                value: item,\r\n                next: last.next\r\n            };\r\n        } else {\r\n            const entry = { value: item } as QueueEntry<T>;\r\n            this._last = entry.next = entry;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 取出队首的项。\r\n     * @return 返回队首的项。如果队列为空则返回 undefined。\r\n     */\r\n    dequeue() {\r\n        if (!this._last) {\r\n            return;\r\n        }\r\n        const head = this._last.next;\r\n        if (head === this._last) {\r\n            this._last = undefined;\r\n        } else {\r\n            this._last.next = head.next;\r\n        }\r\n        return head.value;\r\n    }\r\n\r\n    /**\r\n     * 获取队列顶部的值。\r\n     */\r\n    get top() { return this._last ? this._last.next.value : undefined; }\r\n\r\n    /**\r\n     * 判断队列是否为空。\r\n     */\r\n    get empty() { return this._last == undefined; }\r\n\r\n    /**\r\n     * 获取队列的长度。\r\n     */\r\n    get length() {\r\n        if (this._last == undefined) {\r\n            return 0;\r\n        }\r\n        let count = 1;\r\n        for (let item = this._last.next; item !== this._last; item = item.next) {\r\n            count++;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * 存储队列的最后一项。\r\n     */\r\n    private _last?: QueueEntry<T>;\r\n\r\n    /**\r\n     * 获取队列的迭代器。\r\n     */\r\n    [typeof Symbol === \"undefined\" ? \"iterator\" : Symbol.iterator]() {\r\n        const last = this._last;\r\n        let current = last;\r\n        let end = last == undefined;\r\n        return {\r\n            next() {\r\n                if (end) {\r\n                    return { value: undefined, done: true };\r\n                }\r\n                current = current!.next;\r\n                if (current === last) {\r\n                    end = true;\r\n                }\r\n                return { value: current.value, done: false };\r\n            }\r\n        } as Iterator<T>;\r\n    }\r\n\r\n    /**\r\n     * 将队列转为数组。\r\n     */\r\n    toArray() {\r\n        const r: T[] = [];\r\n        if (this._last) {\r\n            for (let item = this._last.next; item !== this._last; item = item.next) {\r\n                r.push(item.value);\r\n            }\r\n            r.push(this._last.value);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    /**\r\n     * 将队列转为字符串。\r\n     */\r\n    toString() { return this.toArray().toString(); }\r\n\r\n    /**\r\n     * 自定义调试时的显示文案。\r\n     */\r\n    protected inspect() { return `[${this.toString()}]`; }\r\n\r\n}\r\n\r\n/**\r\n * 表示一个队列项。\r\n */\r\ninterface QueueEntry<T> {\r\n\r\n    /**\r\n     * 存储项的值。\r\n     */\r\n    value: T;\r\n\r\n    /**\r\n     * 存储下一个队列项。\r\n     */\r\n    next: QueueEntry<T>;\r\n\r\n}\r\n"],"mappings":"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"}