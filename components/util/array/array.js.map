{"version":3,"file":"array.js","sources":["array.ts"],"sourcesContent":["/**\r\n * 创建一个等差数列组成的数组。\r\n * @param start 开始的数值。\r\n * @param end 结束的数值（不包含此数值）。\r\n * @param step 相邻数值的增幅。\r\n * @return 返回一个新数组。\r\n * @example range(0, 6) // [0, 1, 2, 3, 4, 5]\r\n * @example range(2, 11, 3) // [2, 5, 8]\r\n */\r\nexport function range(start: number, end: number, step = 1) {\r\n    const r: number[] = [];\r\n    for (; start < end; start += step) {\r\n        r.push(start);\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 如果数组中不存在项则添加到数组末尾。\r\n * @param arr 数组。\r\n * @param item 要添加的项。\r\n * @return 如果已添加到数组则返回 true，否则返回 false。\r\n * @example pushIf(1, 9, 0], 1) // 数组变成 [1, 9, 0]\r\n * @example pushIf([1, 9, 0], 2) // 数组变成 [1, 9, 0, 2]\r\n */\r\nexport function pushIf<T>(arr: T[], item: T) {\r\n    return arr.indexOf(item) < 0 && arr.push(item) > 0;\r\n}\r\n\r\n/**\r\n * 在数组的指定索引插入项。\r\n * @param arr 数组。\r\n * @param index 要插入的索引（从 0 开始）。如果索引超出数组的长度，则插入到末尾。\r\n * @param item 要插入的项。\r\n * @example insert([\"I\", \"you\"], 1, \"love\") // 数组变成 [\"I\", \"love\", \"you\"]\r\n */\r\nexport function insert<T>(arr: T[], index: number, item: T) {\r\n    arr.splice(index, 0, item);\r\n}\r\n\r\n/**\r\n * 删除数组中指定的项。如果有多个匹配则只删除第一项。\r\n * @param arr 数组。\r\n * @param item 要删除的项。\r\n * @param startIndex 开始搜索的索引（从 0 开始）。\r\n * @return 返回被删除的项在原数组中的索引。如果数组中找不到指定的项则返回 -1。\r\n * @example remove([1, 9, 9, 0], 9) // 1, 数组变成 [1, 9, 0]\r\n * @example while(remove(arr, \"wow\") >= 0) // 删除所有 \"wow\"。\r\n */\r\nexport function remove<T>(arr: T[], item: T, startIndex?: number) {\r\n    startIndex = arr.indexOf(item, startIndex);\r\n    ~startIndex && arr.splice(startIndex, 1);\r\n    return startIndex;\r\n}\r\n\r\n/**\r\n * 删除数组中指定的项。如果有多个匹配则全部删除。\r\n * @param arr 数组。\r\n * @param item 要删除的项。\r\n * @param startIndex 开始搜索的索引（从 0 开始）。\r\n * @example removeAll([1, 9, 9, 0], 9) // 数组变成 [1, 0]\r\n */\r\nexport function removeAll<T>(arr: T[], item: T, startIndex?: number) {\r\n    let index = startIndex;\r\n    while ((index = remove(arr, item, index)) >= 0);\r\n}\r\n\r\n/**\r\n * 删除数组中转为布尔值后为 false 的项。\r\n * @param arr 数组。\r\n * @example clean([\"\", false, 0, undefined, null, {}]) // 数组变成 [{}]\r\n */\r\nexport function clean<T>(arr: T[]) {\r\n    for (let i = arr.length; --i >= 0;) {\r\n        if (!arr[i]) {\r\n            arr.splice(i, 1);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 清空数组的所有项。\r\n * @param arr 数组。\r\n * @example clear([1, 2]) // 数组变成 []\r\n */\r\nexport function clear<T>(arr: T[]) {\r\n    arr.length = 0;\r\n}\r\n\r\n/**\r\n * 交换数组中的两个项。\r\n * @param arr 数组。\r\n * @param x 要交换的第一个项的索引。\r\n * @param y 要交换的第二个项的索引。\r\n * @example swap([1, 2, 3], 1, 2)\r\n */\r\nexport function swap<T>(arr: T[], x: number, y: number) {\r\n    const t = arr[x];\r\n    arr[x] = arr[y];\r\n    arr[y] = t;\r\n}\r\n\r\n/**\r\n * 根据指定的规则排序。\r\n * @param arr 数组。\r\n * @param keys 排序的所有规则。规则可以是一个键名或自定义取值的函数。\r\n * @example sortBy([{ \"user\": \"fred\" }, { \"user\": \"bred\" }], o => o.user) // [{ \"user\": \"bred\" }, { \"user\": \"fred\" }]\r\n * @example sortBy([{ \"user\": \"fred\" }, { \"user\": \"bred\" }], \"user\") // [{ \"user\": \"bred\" }, { \"user\": \"fred\" }]\r\n */\r\nexport function sortBy<T>(arr: T[], ...keys: (((item: T) => any) | keyof T)[]) {\r\n    arr.sort((x, y) => {\r\n        for (const key of keys) {\r\n            const valueX = typeof key === \"function\" ? (key as (item: T) => any)(x) : x[key];\r\n            const valueY = typeof key === \"function\" ? (key as (item: T) => any)(y) : y[key];\r\n            if (valueX > valueY) {\r\n                return 1;\r\n            }\r\n            if (valueX < valueY) {\r\n                return -1;\r\n            }\r\n        }\r\n        return 0;\r\n    });\r\n}\r\n\r\n/**\r\n * 根据指定的规则倒排。\r\n * @param arr 数组。\r\n * @param keys 排序的所有规则。规则可以是一个键名或自定义取值的函数。\r\n * @example sortByDesc([{ \"user\": \"bred\" }, { \"user\": \"fred\" }], o => o.user) // [{ \"user\": \"fred\" }, { \"user\": \"bred\" }]\r\n * @example sortByDesc([{ \"user\": \"bred\" }, { \"user\": \"fred\" }], \"user\") // [{ \"user\": \"fred\" }, { \"user\": \"bred\" }]\r\n */\r\nexport function sortByDesc<T>(arr: T[], ...keys: (((item: T) => any) | keyof T)[]) {\r\n    return arr.sort((x, y) => {\r\n        for (const item of keys) {\r\n            const valueX = typeof item === \"function\" ? (item as (item: T) => any)(x) : x[item];\r\n            const valueY = typeof item === \"function\" ? (item as (item: T) => any)(y) : y[item];\r\n            if (valueX > valueY) {\r\n                return -1;\r\n            }\r\n            if (valueX < valueY) {\r\n                return 1;\r\n            }\r\n        }\r\n        return 0;\r\n    });\r\n}\r\n\r\n/**\r\n * 将数组的项按指定规则分组。\r\n * @param arr 数组。\r\n * @param key 分组的规则。规则可以是一个键名或自定义取值的函数。\r\n * @example groupBy([{a: 1}, {a: 1}, {a: 2}], \"a\") // [{key: 1, length: 2, 0: {a: 1}, 1: {a: 1}}, {key: 2, length: 1, 0: {a: 1}}]\r\n */\r\nexport function groupBy<T>(arr: T[], key: ((item: T) => any) | keyof T) {\r\n    const r: (T[] & { key: any })[] = [];\r\n    next: for (const item of arr) {\r\n        const groupKey = typeof key === \"function\" ? (key as ((item: T) => any))(item) : item[key];\r\n        for (const v of r) {\r\n            if (v.key === groupKey) {\r\n                v.push(item);\r\n                continue next;\r\n            }\r\n        }\r\n        const arr2 = [item] as typeof r[0];\r\n        arr2.key = groupKey;\r\n        r.push(arr2);\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 将数组的项按指定规则分组然后统计每个分组的项数。\r\n * @param arr 数组。\r\n * @param key 分组的规则。规则可以是一个键名或自定义取值的函数。\r\n * @example countBy([{a: 1}, {a: 1}, {a: 2}], \"a\") // {1: 2, 2: 1}\r\n */\r\nexport function countBy<T>(arr: T[], key: ((item: T) => any) | keyof T) {\r\n    const r: { [key: string]: number } = {};\r\n    for (const item of arr) {\r\n        const groupKey = typeof key === \"function\" ? (key as ((item: T) => any))(item) : item[key];\r\n        r[groupKey] = r[groupKey] + 1 || 1;\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 将数组等分成多个子数组。\r\n * @param arr 数组。\r\n * @param count 每个子数组的长度。\r\n * @param maxCount 最多允许拆分的组数。如果超出限制后则剩余的项全部添加到最后一个子数组中。\r\n * @return 返回一个二维数组。\r\n * @example split([1, 2, 3, 4, 5], 2) // [[1, 2], [3, 4], [5]]\r\n */\r\nexport function split<T>(arr: T[], count = 1, maxCount?: number) {\r\n    const r: T[][] = [];\r\n    for (let i = 0; i < arr.length;) {\r\n        if (maxCount! > 0 && r.length >= maxCount!) {\r\n            r.push(arr.slice(i));\r\n            break;\r\n        }\r\n        r.push(arr.slice(i, i += count));\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 将数组中的项随机打乱。\r\n * @param arr 数组。\r\n * @example shuffle([1, 2, 3])\r\n */\r\nexport function shuffle<T>(arr: T[]) {\r\n    let index = arr.length;\r\n    while (index > 0) {\r\n        const target = Math.floor(Math.random() * index);\r\n        const value = arr[--index];\r\n        arr[index] = arr[target];\r\n        arr[target] = value;\r\n    }\r\n}\r\n\r\n/**\r\n * 随机获取数组中的任一项。\r\n * @param arr 数组。\r\n * @return 返回某一项。如果数组为空则返回 undefined。\r\n * @example random([1, 2, 3])\r\n */\r\nexport function random<T>(arr: T[]) {\r\n    return arr[Math.floor(arr.length * Math.random())];\r\n}\r\n\r\n/**\r\n * 获取数组中指定索引的项。\r\n * @param arr 数组。\r\n * @param index 要获取的索引（从 0 开始）。如果值为负数，则获取倒数的项。\r\n * @return 返回指定索引的项。\r\n * @example item([\"a\", \"b\"], -1) // \"b\"\r\n */\r\nexport function item<T>(arr: T[], index: number) {\r\n    return arr[index < 0 ? arr.length + index : index];\r\n}\r\n\r\n/**\r\n * 获取数组中第一个不为空的项。\r\n * @param arr 数组。\r\n * @return 返回第一个不为空的项，如果所有项都为空则返回 undefined。\r\n * @example pick([undefined, null, 1, 2]) // 1\r\n */\r\nexport function pick<T>(arr: T[]) {\r\n    for (const value of arr) {\r\n        if (value != undefined) {\r\n            return value;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 计算指定项在数组中出现的次数。\r\n * @param arr 数组。\r\n * @param item 要查找的项。\r\n * @param startIndex 开始查找的索引（从 0 开始）。\r\n * @param endIndex 结束查找的索引（从 0 开始，不含）。\r\n * @return 返回项出现的次数。\r\n * @example count([\"a\", \"b\"], \"a\") // 1\r\n */\r\nexport function count<T>(arr: T[], item: T, startIndex = 0, endIndex = arr.length) {\r\n    let r = 0;\r\n    for (; startIndex < endIndex; startIndex++) {\r\n        if (arr[startIndex] === item) {\r\n            r++;\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 判断数组中是否存在重复项。\r\n * @param arr 数组。\r\n * @return 若数组中存在重复项则返回 true，否则返回 false。\r\n * @example isUnique([1, 9, 0]) // true\r\n * @example isUnique([1, 9, 9, 0]) // false\r\n */\r\nexport function isUnique<T>(arr: T[]) {\r\n    for (let i = arr.length - 1; i > 0; i--) {\r\n        if (~arr.indexOf(arr[i - 1], i)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * 删除数组中的重复项并返回新数组。\r\n * @param arr 数组。\r\n * @return 返回过滤后的新数组。\r\n * @example [1, 9, 9, 0].unique() // [1, 9, 0]\r\n */\r\nexport function unique<T>(arr: T[]) {\r\n    const r: T[] = [];\r\n    for (const value of arr) {\r\n        r.indexOf(value) < 0 && r.push(value);\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 将多维数组合并为一维数组。\r\n * @param arr 数组。\r\n * @return 返回新数组。\r\n * @example flatten([[1, 2], [[[3]]]]) // [1, 2, 3]\r\n */\r\nexport function flatten(arr: any[]) {\r\n    const r: any[] = [];\r\n    for (const value of arr) {\r\n        value && value instanceof Array ? r.push(...flatten(value)) : r.push(value);\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 从数组中删除另一个数组的所有项，返回剩下的项组成的新数组。\r\n * @param arr 数组。\r\n * @param other 需要被删除的项数组。\r\n * @return 返回新数组。\r\n * @example sub([1, 2], [1]) // [2]\r\n */\r\nexport function sub<T>(arr: T[], other: T[]) {\r\n    const r: T[] = [];\r\n    for (let i = arr.length; --i >= 0;) {\r\n        ~other.indexOf(arr[i]) || r.push(arr[i]);\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 计算所有数组的并集。\r\n * @param arrs 要合并的所有数组。\r\n * @return 返回所有数组中出现过的元素组成的无重复项的新数组。\r\n * @example union([1, 2], [1]) // [1, 2]\r\n */\r\nexport function union<T>(...arrs: T[][]) {\r\n    const r: T[] = [];\r\n    for (const arr of arrs) {\r\n        for (const item of arr) {\r\n            if (r.indexOf(item) < 0) {\r\n                r.push(item);\r\n            }\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 计算所有数组的交集。\r\n * @param arrs 要取交集的所有数组。\r\n * @return 返回所有数组中公共元素组成的无重复项的新数组。\r\n * @example intersect([1, 2, 3], [101, 2, 1, 10], [2, 1]) // [1, 2]\r\n */\r\nexport function intersect<T>(...arrs: T[][]) {\r\n    const r: T[] = [];\r\n    if (arrs.length) {\r\n        next: for (const item of arrs[0]) {\r\n            for (let j = 1; j < arrs.length; j++) {\r\n                if (arrs[j].indexOf(item) < 0) {\r\n                    continue next;\r\n                }\r\n            }\r\n            r.push(item);\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 计算数组的全排列结果。\r\n * @param arr 数组。\r\n * @return 返回一个新数组，其每一项都是一种排列方式。\r\n * @example permute([1, 2, 3]) // [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\r\n */\r\nexport function permute<T>(arr: T[]) {\r\n    const r: T[][] = [];\r\n    const usedItems: T[] = [];\r\n    const next = (input: any) => {\r\n        for (let i = 0; i < input.length; i++) {\r\n            const item = input.splice(i, 1)[0];\r\n            usedItems.push(item);\r\n            if (input.length == 0) {\r\n                r.push(usedItems.slice(0));\r\n            }\r\n            next(input);\r\n            input.splice(i, 0, item);\r\n            usedItems.pop();\r\n        }\r\n    };\r\n    next(arr);\r\n    return r;\r\n}\r\n\r\n/**\r\n * 根据指定的规则选择项。\r\n * @param arr 数组。\r\n * @param key 选择的规则。规则可以是一个键名或自定义取值的函数。\r\n * @return 返回选择的结果组成的新数组。\r\n * @example select([{\"user\": \"fred\"}, {\"banch\": \"bred\"}], o => o.user) // [\"fred\"]\r\n * @example select([{\"user\": \"fred\"}, {\"banch\": \"bred\"}], \"user\") // [\"fred\"]\r\n */\r\nexport function select<T, R>(arr: T[], key: ((item: T) => R) | keyof T) {\r\n    const r: R[] = [];\r\n    for (const item of arr) {\r\n        r.push(typeof key === \"function\" ? (key as (item: T) => R)(item) : item[key] as any);\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 调用数组每一项的成员函数。\r\n * @param arr 数组。\r\n * @param fnName 要调用的成员函数名。\r\n * @param args 调用的所有参数。\r\n * @return 返回所有调用结果组成的新数组。\r\n * @example invoke([\"Teal\", \"UI\"], \"length\") // [4, 2]\r\n */\r\nexport function invoke<T>(arr: T[], fnName: string, ...args: any[]) {\r\n    const r: T[] = [];\r\n    for (const value of arr) {\r\n        let item = (value as any)[fnName];\r\n        if (typeof item === \"function\") {\r\n            item = item.apply(value, args);\r\n        }\r\n        r.push(item);\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 将数组中的项分别和指定的键组合为对象。\r\n * @param arr 数组。\r\n * @param keys 键列表。\r\n * @return 返回数组和指定键组成的键值对。\r\n * @example associate([1, 2], [\"a\", \"b\"]) // { a: 1, b: 2 }\r\n */\r\nexport function associate<T>(arr: T[], keys: string[]) {\r\n    const r: { [key: string]: T; } = {};\r\n    const length = Math.min(arr.length, keys.length);\r\n    for (let i = 0; i < length; i++) {\r\n        r[keys[i]] = arr[i];\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 在已排序的数组中二分查找指定的项。\r\n * @param arr 数组。\r\n * @param value 要查找的项。\r\n * @param compareFn 用于排序时确定优先级的函数。函数接收以下参数：\r\n * - x：要比较的第一个参数。\r\n * - y：要比较的第二个参数。\r\n *\r\n * 如果返回 true，则说明 *x* 应该排在 *y* 之前。否则 *x* 应该排在 *y* 之后。\r\n * @param start 开始查找的索引（从 0 开始）。\r\n * @param end 结束查找的索引（从 0 开始）。\r\n * @example binarySearch([1, 2, 3, 4, 5], 3) // 2\r\n */\r\nexport function binarySearch<T>(arr: T[], value: T, compareFn?: (item1: T, item2: T) => any, start = 0, end = arr.length) {\r\n    while (start < end) {\r\n        const middle = Math.floor((start + end) / 2);\r\n        if (compareFn ? compareFn(arr[middle], value) < 0 : arr[middle] < value) start = middle + 1;\r\n        else end = middle;\r\n    }\r\n    return start;\r\n}\r\n\r\n/**\r\n * 计算数组中所有项的最小值。\r\n * @param arr 数组。\r\n * @return 返回数组中所有项的最小值。如果数组为空则返回 Infinity。\r\n * @example min([1, 2]) // 1\r\n */\r\nexport function min(arr: number[]) {\r\n    return Math.min(...arr);\r\n}\r\n\r\n/**\r\n * 计算数组中所有项的最大值。\r\n * @param arr 数组。\r\n * @return 返回数组中所有项的最大值。如果数组为空则返回 -Infinity。\r\n * @example max([1, 2]) // 2\r\n */\r\nexport function max(arr: number[]) {\r\n    return Math.max(...arr);\r\n}\r\n\r\n/**\r\n * 计算数组中所有项的和。\r\n * @param arr 数组。\r\n * @return 返回数组中所有数值的和。计算时将忽略非数字的项。如果数组为空则返回 0。\r\n * @example sum([1, 2]) // 3\r\n */\r\nexport function sum(arr: number[]) {\r\n    let r = 0;\r\n    let i = arr.length;\r\n    while (--i >= 0) {\r\n        r += +arr[i] || 0;\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 计算数组中所有项的算术平均值。\r\n * @param arr 数组。\r\n * @return 返回数组中所有数值的算术平均值。计算时将忽略非数字的项。如果数组为空则返回 0。\r\n * @example avg([1, 2]) // 1.5\r\n */\r\nexport function avg(arr: number[]) {\r\n    let sum = 0;\r\n    let c = 0;\r\n    let i = arr.length;\r\n    while (--i >= 0) {\r\n        if (arr[i] === 0 || +arr[i]) {\r\n            sum += +arr[i];\r\n            c++;\r\n        }\r\n    }\r\n    return c ? sum / c : 0;\r\n}\r\n"],"mappings":"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"}