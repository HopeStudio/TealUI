{"version":3,"file":"object.js","sources":["object.ts"],"sourcesContent":["/**\r\n * 复制源对象的所有可枚举属性到目标对象，如果目标对象中对应的属性值不是 undefined 则跳过。\r\n * @param target 目标对象。\r\n * @param source 源对象。源对象可以是 null 或 undefined。\r\n * @return 返回目标对象。\r\n * @example assignIf({a: 1}, {a: 2, b: 2}) // {a: 1, b: 2}\r\n */\r\nexport function assignIf<T, R>(target: T, source: R) {\r\n    for (const key in source as any) {\r\n        if ((target as any)[key] === undefined) {\r\n            (target as any)[key] = (source as any)[key];\r\n        }\r\n    }\r\n    return target as T & R;\r\n}\r\n\r\n/**\r\n * 获取对象自身或原型上的属性描述符。\r\n * @param obj 对象。\r\n * @param key 要获取的属性名。\r\n * @return 返回对象描述器。如果找不到则返回 undefined。\r\n */\r\nexport function getPropertyDescriptor(obj: any, key: string) {\r\n    let desc: PropertyDescriptor | undefined;\r\n    while (obj && !(desc = Object.getOwnPropertyDescriptor(obj, key))) {\r\n        obj = obj.__proto__ || Object.getPrototypeOf(obj);\r\n    }\r\n    return desc;\r\n}\r\n\r\n/**\r\n * 在对象指定的键之前插入一个键值对。\r\n * @param obj 对象。\r\n * @param newKey 要插入的键。\r\n * @param newValue 要插入的值。\r\n * @param refKey 指示插入位置的键，将在该键前插入。如果指定为 null 则插入到末尾。\r\n * @example insertBefore({ a: 1 }, \"b\", 2, \"a\") // { b:2, a: 1 }\r\n */\r\nexport function insertBefore<T extends any>(obj: T, newKey: string, newValue: any, refKey?: keyof T) {\r\n    let tmpObj: any;\r\n    for (const key in obj) {\r\n        if (key === refKey) {\r\n            tmpObj = {};\r\n        }\r\n        if (tmpObj) {\r\n            tmpObj[key] = obj[key];\r\n            delete obj[key];\r\n        }\r\n    }\r\n    obj[newKey] = newValue;\r\n    for (const key in tmpObj) {\r\n        obj[key] = tmpObj[key];\r\n    }\r\n}\r\n\r\n/**\r\n * 对类数组的每一项执行一次回调函数。\r\n * @param obj 类数组。\r\n * @param callback 回调函数。函数接收以下参数：\r\n * - value：当前项的值。\r\n * - index：当前项的索引。\r\n * - target：类数组本身。\r\n *\r\n * 函数可以返回 false 以终止循环。\r\n * @param thisArg 执行回调函数时 this 的值。\r\n * @return 如果循环是因为回调函数返回 false 而中止，则返回 false，否则返回 true。\r\n * @example each([\"a\", \"b\"], console.log, console); // 打印“0  a”和“1  b”\r\n */\r\nexport function each<T>(obj: ArrayLike<T>, callback: (value: T, index: number, target: ArrayLike<T>) => boolean | void, thisArg?: any): boolean;\r\n\r\n/**\r\n * 对对象（函数除外）的每一项执行一次回调函数。\r\n * @param obj 对象。\r\n * @param callback 回调函数。函数接收以下参数：\r\n * - value：当前项的值。\r\n * - key：当前项的键。\r\n * - target：对象本身。\r\n *\r\n * 函数可以返回 false 以终止循环。\r\n * @param thisArg 执行回调函数时 this 的值。\r\n * @return 如果循环是因为回调函数返回 false 而中止，则返回 false，否则返回 true。\r\n * @example each({a: 1, b: 2}, console.log, console); // 打印“a  1”和“b  2”\r\n */\r\nexport function each<T>(obj: { [key: string]: T }, callback: (value: T, key: string, obj: { [key: string]: T }) => boolean | void, thisArg?: any): boolean;\r\n\r\nexport function each<T>(obj: ArrayLike<T> | { [key: string]: T }, callback: (value: T, key: any, obj: any) => boolean | void, thisArg?: any) {\r\n    if (obj && typeof (obj as ArrayLike<T>).length === \"number\") {\r\n        for (let i = 0; i < (obj as ArrayLike<T>).length; i++) {\r\n            if ((i in obj) && callback.call(thisArg, (obj as any)[i], i, obj) === false) {\r\n                return false;\r\n            }\r\n        }\r\n    } else {\r\n        for (const i in obj) {\r\n            if (callback.call(thisArg, (obj as any)[i], i, obj) === false) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * 对类数组的每一项执行一次回调函数。\r\n * @param obj 类数组。\r\n * @param callback 回调函数。函数接收以下参数：\r\n * - value：当前项的值。\r\n * - index：当前项的索引。\r\n * - target：类数组本身。\r\n * @param thisArg 执行回调函数时 this 的值。\r\n * @example forEach([\"a\", \"b\"], console.log, console) // 打印“0  a”和“1  b”\r\n */\r\nexport function forEach<T>(obj: ArrayLike<T>, callback: (value: T, index: number, target: ArrayLike<T>) => boolean | void, thisArg?: any): void;\r\n\r\n/**\r\n * 对对象（函数除外）的每一项执行一次回调函数。\r\n * @param obj 对象。\r\n * @param callback 回调函数。函数接收以下参数：\r\n * - value：当前项的值。\r\n * - key：当前项的键。\r\n * - target：对象本身。\r\n * @param thisArg 执行回调函数时 this 的值。\r\n * @example forEach({a: 1, b: 2}, console.log, console) // 打印“a  1”和“b  2”\r\n */\r\nexport function forEach<T>(obj: { [key: string]: T }, callback: (value: T, key: string, obj: { [key: string]: T }) => boolean | void, thisArg?: any): void;\r\n\r\nexport function forEach<T>(obj: ArrayLike<T> | { [key: string]: T }, callback: (value: T, key: any, obj: any) => boolean | void, thisArg?: any) {\r\n    if (obj && typeof (obj as ArrayLike<T>).length === \"number\") {\r\n        for (let i = 0; i < (obj as ArrayLike<T>).length; i++) {\r\n            if (i in obj) {\r\n                callback.call(thisArg, (obj as any)[i], i, obj);\r\n            }\r\n        }\r\n    } else {\r\n        for (const i in obj) {\r\n            callback.call(thisArg, (obj as any)[i], i, obj);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 筛选类数组中符合条件的项并组成一个新数组。\r\n * @param obj 类数组。\r\n * @param callback 用于确定每一项是否符合条件的回调函数。函数接收以下参数：\r\n * - value：当前项的值。\r\n * - index：当前项的索引。\r\n * - target：类数组本身。\r\n *\r\n * 如果当前项符合条件应返回 true，否则返回 false。\r\n * @param thisArg 执行回调函数时 this 的值。\r\n * @return 返回一个新数组。\r\n * @example filter([1, 2], function (item) { return item > 1; }) // [2]\r\n */\r\nexport function filter<T>(obj: ArrayLike<T>, callback: (value: T, index: number, target: ArrayLike<T>) => boolean, thisArg?: any): { [key: string]: T };\r\n\r\n/**\r\n * 筛选对象（函数除外）中符合条件的项并组成一个新对象。\r\n * @param obj 对象。\r\n * @param callback 用于确定每一项是否符合条件的回调函数。函数接收以下参数：\r\n * - value：当前项的值。\r\n * - key：当前项的键。\r\n * - target：对象本身。\r\n *\r\n * 如果当前项符合条件应返回 true，否则返回 false。\r\n * @param thisArg 执行回调函数时 this 的值。\r\n * @return 返回一个新对象。\r\n * @example filter({a: 1, b: 2}, function (item) { return item > 1; }) // {b: 2}\r\n */\r\nexport function filter<T>(obj: { [key: string]: T }, callback: (value: T, key: string, obj: { [key: string]: T }) => boolean, thisArg?: any): { [key: string]: T };\r\n\r\nexport function filter<T>(obj: ArrayLike<T> | { [key: string]: T }, callback: (value: T, key: any, obj: any) => boolean, thisArg?: any) {\r\n    let r: T[] | { [key: string]: T };\r\n    if (obj && typeof (obj as ArrayLike<T>).length === \"number\") {\r\n        r = [];\r\n        for (let i = 0; i < (obj as ArrayLike<T>).length; i++) {\r\n            if ((i in obj) && callback.call(thisArg, (obj as any)[i], i, obj)) {\r\n                r.push((obj as any)[i]);\r\n            }\r\n        }\r\n    } else {\r\n        r = {};\r\n        for (const i in obj) {\r\n            if (callback.call(thisArg, (obj as any)[i], i, obj)) {\r\n                r[i] = (obj as any)[i];\r\n            }\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 对类数组的每一项执行一次回调函数，然后将每个结果组成新数组。\r\n * @param obj 类数组。\r\n * @param callback 回调函数。函数接收以下参数：\r\n * - value：当前项的值。\r\n * - index：当前项的索引。\r\n * - target：类数组本身。\r\n *\r\n * 函数应返回新的结果。\r\n * @param thisArg 执行回调函数时 this 的值。\r\n * @return 返回一个新数组。\r\n * @example map([\"a\", \"b\"], function (a) { return a + a; }) // [\"aa\", \"bb\"]\r\n */\r\nexport function map<T, R>(obj: ArrayLike<T>, callback: (value: T, index: number, target: ArrayLike<T>) => R, thisArg?: any): R[];\r\n\r\n/**\r\n * 对对象（函数除外）的每一项执行一次回调函数，然后将每个结果组成新数组。\r\n * @param obj 对象。\r\n * @param callback 回调函数。函数接收以下参数：\r\n * - value：当前项的值。\r\n * - key：当前项的键。\r\n * - target：对象本身。\r\n *\r\n * 函数应返回新的结果。\r\n * @param thisArg 执行回调函数时 this 的值。\r\n * @return 返回一个新对象。\r\n * @example map({length: 1, \"0\": \"a\"}, function (a) { return a + a; }) // [\"a\"]\r\n * @example map({a: \"a\", b: \"b\"}, function (a) { return a + a; }) // {a: \"aa\", b: \"bb\"}\r\n */\r\nexport function map<T, R>(obj: { [key: string]: T }, callback: (value: T, key: string, obj: { [key: string]: T }) => R, thisArg?: any): { [key: string]: R };\r\n\r\nexport function map<T, R>(obj: ArrayLike<T> | { [key: string]: T }, callback: (value: T, key: any, obj: any) => R, thisArg?: any) {\r\n    let r: R[] | { [key: string]: R };\r\n    if (obj && typeof (obj as ArrayLike<T>).length === \"number\") {\r\n        r = [];\r\n        for (let i = 0; i < (obj as ArrayLike<T>).length; i++) {\r\n            if (i in obj) {\r\n                r[i] = callback.call(thisArg, (obj as any)[i], i, obj);\r\n            }\r\n        }\r\n    } else {\r\n        r = {};\r\n        for (const i in obj) {\r\n            r[i] = callback.call(thisArg, (obj as any)[i], i, obj);\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 判断类数组的每一项是否都符合条件。\r\n * @param obj 类数组。\r\n * @param callback 用于确定每一项是否符合条件的回调函数。函数接收以下参数：\r\n * - value：当前项的值。\r\n * - index：当前项的索引。\r\n * - target：类数组本身。\r\n *\r\n * 如果当前项符合条件应返回 true，否则返回 false。\r\n * @param thisArg 执行回调函数时 this 的值。\r\n * @return 如果所有项满足条件则返回 true，否则返回 false。\r\n * @example every([1, 2], function (item) { return item > 0; }) // true\r\n * @example every([1, 2], function (item) { return item > 1; }) // false\r\n * @example every([1, 2], function (item) { return item > 2; }) // false\r\n */\r\nexport function every<T>(obj: ArrayLike<T>, callback: (value: T, index: number, target: ArrayLike<T>) => boolean, thisArg?: any): boolean;\r\n\r\n/**\r\n * 判断对象（函数除外）的每一项是否都符合条件。\r\n * @param obj 对象。\r\n * @param callback 用于确定每一项是否符合条件的回调函数。函数接收以下参数：\r\n * - value：当前项的值。\r\n * - key：当前项的键。\r\n * - target：对象本身。\r\n *\r\n * 如果当前项符合条件应返回 true，否则返回 false。\r\n * @param thisArg 执行回调函数时 this 的值。\r\n * @return 如果所有项满足条件则返回 true，否则返回 false。\r\n * @example every({a: 1, b: 2}, function (item) { return item > 0; }) // true\r\n * @example every({a: 1, b: 2}, function (item) { return item > 1; }) // false\r\n * @example every({a: 1, b: 2}, function (item) { return item > 2; }) // false\r\n */\r\nexport function every<T>(obj: { [key: string]: T }, callback: (value: T, key: string, obj: { [key: string]: T }) => boolean, thisArg?: any): boolean;\r\n\r\nexport function every<T>(obj: ArrayLike<T> | { [key: string]: T }, callback: (value: T, key: any, obj: any) => boolean, thisArg?: any) {\r\n    if (obj && typeof (obj as ArrayLike<T>).length === \"number\") {\r\n        for (let i = 0; i < (obj as ArrayLike<T>).length; i++) {\r\n            if ((i in obj) && !callback.call(thisArg, (obj as any)[i], i, obj)) {\r\n                return false;\r\n            }\r\n        }\r\n    } else {\r\n        for (const i in obj) {\r\n            if (!callback.call(thisArg, (obj as any)[i], i, obj)) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * 判断类数组中是否存在一项或多项符合条件。\r\n * @param obj 类数组。\r\n * @param callback 用于确定每一项是否符合条件的回调函数。函数接收以下参数：\r\n * - value：当前项的值。\r\n * - index：当前项的索引。\r\n * - target：类数组本身。\r\n *\r\n * 如果当前项符合条件应返回 true，否则返回 false。\r\n * @param thisArg 执行回调函数时 this 的值。\r\n * @return 如果至少存在一项满足条件则返回 true，否则返回 false。\r\n * @example some([1, 2], function (item) { return item > 0; }) // true\r\n * @example some([1, 2], function (item) { return item > 1; }) // true\r\n * @example some([1, 2], function (item) { return item > 2; }) // false\r\n */\r\nexport function some<T>(obj: ArrayLike<T>, callback: (value: T, index: number, target: ArrayLike<T>) => boolean, thisArg?: any): boolean;\r\n\r\n/**\r\n * 判断对象（函数除外）中是否存在一项或多项符合条件。\r\n * @param obj 对象。\r\n * @param callback 用于确定每一项是否符合条件的回调函数。函数接收以下参数：\r\n * - value：当前项的值。\r\n * - key：当前项的键。\r\n * - target：对象本身。\r\n *\r\n * 如果当前项符合条件应返回 true，否则返回 false。\r\n * @param thisArg 执行回调函数时 this 的值。\r\n * @return 如果至少存在一项满足条件则返回 true，否则返回 false。\r\n * @example some({a: 1, b: 2}, function (item) { return item > 1; }) // true\r\n * @example some({a: 1, b: 2}, function (item) { return item > 1; }) // true\r\n * @example some({a: 1, b: 2}, function (item) { return item > 2; }) // false\r\n */\r\nexport function some<T>(obj: { [key: string]: T }, callback: (value: T, key: string, obj: { [key: string]: T }) => boolean, thisArg?: any): boolean;\r\n\r\nexport function some<T>(obj: ArrayLike<T> | { [key: string]: T }, callback: (value: T, key: any, obj: any) => boolean, thisArg?: any) {\r\n    if (obj && typeof (obj as ArrayLike<T>).length === \"number\") {\r\n        for (let i = 0; i < (obj as ArrayLike<T>).length; i++) {\r\n            if ((i in obj) && callback.call(thisArg, (obj as ArrayLike<T>)[i], i, obj)) {\r\n                return true;\r\n            }\r\n        }\r\n    } else {\r\n        for (const i in obj) {\r\n            if (callback.call(thisArg, (obj as { [key: string]: T })[i], i, obj)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * 找出类数组中符合条件的第一项。\r\n * @param obj 类数组。\r\n * @param callback 用于确定每一项是否符合条件的回调函数。函数接收以下参数：\r\n * - value：当前项的值。\r\n * - index：当前项的索引。\r\n * - target：类数组本身。\r\n *\r\n * 如果当前项符合条件应返回 true，否则返回 false。\r\n * @param thisArg 执行回调函数时 this 的值。\r\n * @return 返回符合条件的第一项，如果找不到则返回 undefined。\r\n * @example find([1, 2], function (item) { return item > 1; }) // 2\r\n */\r\nexport function find<T>(obj: ArrayLike<T>, callback: (value: T, index: number, target: ArrayLike<T>) => boolean, thisArg?: any): T | undefined;\r\n\r\n/**\r\n * 找出对象（函数除外）中符合条件的第一项。\r\n * @param obj 对象。\r\n * @param callback 用于确定每一项是否符合条件的回调函数。函数接收以下参数：\r\n * - value：当前项的值。\r\n * - key：当前项的键。\r\n * - target：对象本身。\r\n *\r\n * 如果当前项符合条件应返回 true，否则返回 false。\r\n * @param thisArg 执行回调函数时 this 的值。\r\n * @return 返回符合条件的第一项，如果找不到则返回 undefined。\r\n * @example find({a: 1, b: 2}, function (item) { return item > 1; }) // 2\r\n */\r\nexport function find<T>(obj: { [key: string]: T }, callback: (value: T, key: string, obj: { [key: string]: T }) => boolean, thisArg?: any): T | undefined;\r\n\r\nexport function find<T>(obj: ArrayLike<T> | { [key: string]: T }, callback: (value: T, key: any, obj: any) => boolean, thisArg?: any) {\r\n    if (obj && typeof (obj as ArrayLike<T>).length === \"number\") {\r\n        for (let i = 0; i < (obj as ArrayLike<T>).length; i++) {\r\n            if ((i in obj) && callback.call(thisArg, (obj as ArrayLike<T>)[i], i, obj)) {\r\n                return (obj as any)[i] as T;\r\n            }\r\n        }\r\n    } else {\r\n        for (const i in obj) {\r\n            if (callback.call(thisArg, (obj as { [key: string]: T })[i], i, obj)) {\r\n                return (obj as { [key: string]: T })[i];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 找出类数组中符合条件的第一项的索引。\r\n * @param obj 类数组。\r\n * @param callback 用于确定每一项是否符合条件的回调函数。函数接收以下参数：\r\n * - value：当前项的值。\r\n * - index：当前项的索引。\r\n * - target：类数组本身。\r\n *\r\n * 如果当前项符合条件应返回 true，否则返回 false。\r\n * @param thisArg 执行回调函数时 this 的值。\r\n * @return 返回符合条件的第一项的索引，如果找不到则返回 -1。\r\n * @example findIndex([1, 2], function (item){ return item > 1; }) // 1\r\n * @example findIndex([1, 2], function (item){ return item > 2; }) // -1\r\n */\r\nexport function findIndex<T>(obj: ArrayLike<T>, callback: (value: T, index: number, target: ArrayLike<T>) => boolean, thisArg?: any): number;\r\n\r\n/**\r\n * 找出指定对象（函数除外）中符合条件的第一项的键。\r\n * @param obj 对象。\r\n * @param callback 用于确定每一项是否符合条件的回调函数。函数接收以下参数：\r\n * - value：当前项的值。\r\n * - key：当前项的键。\r\n * - target：对象本身。\r\n *\r\n * 如果当前项符合条件应返回 true，否则返回 false。\r\n * @param thisArg 执行回调函数时 this 的值。\r\n * @return 返回符合条件的第一项的键，如果找不到则返回 null。\r\n * @example findIndex({a: 1, b: 2}, function (item){return item > 1;}) // 'b'\r\n * @example findIndex({a: 1, b: 2}, function (item){return item > 2;}) // undefined\r\n */\r\nexport function findIndex<T>(obj: { [key: string]: T }, callback: (value: T, key: string, obj: { [key: string]: T }) => boolean, thisArg?: any): string | null;\r\n\r\nexport function findIndex<T>(obj: ArrayLike<T> | { [key: string]: T }, callback: (value: T, key: any, obj: any) => boolean, thisArg?: any) {\r\n    if (obj && typeof (obj as ArrayLike<T>).length === \"number\") {\r\n        for (let i = 0; i < (obj as ArrayLike<T>).length; i++) {\r\n            if ((i in obj) && callback.call(thisArg, (obj as ArrayLike<T>)[i], i, obj)) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    } else {\r\n        for (const i in obj) {\r\n            if (callback.call(thisArg, (obj as { [key: string]: T })[i], i, obj)) {\r\n                return i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * 从左往右依次合并类数组中的每一项并最终返回一个值。\r\n * @param obj 类数组。\r\n * @param callback 用于合并两个项的回调函数。函数接收以下参数：\r\n * - previousValue：要合并的前一项。\r\n * - currentValue：要合并的当前项。\r\n * - index：当前项的索引。\r\n * - target：类数组本身。\r\n *\r\n * 函数应合并的结果。\r\n * @param initialValue 用于合并第一项的初始值。\r\n * @param thisArg 执行回调函数时 this 的值。\r\n * @return 返回合并后的最终结果值。\r\n * @example reduce([1, 2], function (x, y) { return x + y; }) // 3\r\n * @example reduce([1, 2], function (x, y) { return x + y; }, 10) // 13\r\n */\r\nexport function reduce<T, R>(obj: ArrayLike<T>, callback: (previousValue: R, currentValue: T, index: number, target: ArrayLike<T>) => R, initialValue?: R, thisArg?: any): R | undefined;\r\n\r\n/**\r\n * 从左往右依次合并对象（函数除外）中的每一项并最终返回一个值。\r\n * @param obj 对象。\r\n * @param callback 用于合并两个项的回调函数。函数接收以下参数：\r\n * - previousValue：要合并的前一项。\r\n * - currentValue：要合并的当前项。\r\n * - key：当前项的键。\r\n * - target：对象本身。\r\n *\r\n * 函数应合并的结果。\r\n * @param initialValue 用于合并第一项的初始值。\r\n * @param thisArg 执行回调函数时 this 的值。\r\n * @return 返回合并后的最终结果值。\r\n * @example reduce({a: 1, b: 2}, function (x, y) { return x + y; }) // 3\r\n * @example reduce({a: 1, b: 2}, function (x, y) { return x + y; }, 10) // 13\r\n */\r\nexport function reduce<T, R>(obj: { [key: string]: T }, callback: (previousValue: R, currentValue: T, key: string, obj: { [key: string]: T }) => R, initialValue?: R, thisArg?: any): R | undefined;\r\n\r\nexport function reduce<T, R>(obj: ArrayLike<T> | { [key: string]: T }, callback: (previousValue: R, currentValue: T, key: any, obj: any) => R, initialValue?: R, thisArg?: any) {\r\n    let r: R | undefined;\r\n    let first = true;\r\n    if (obj && typeof (obj as ArrayLike<T>).length === \"number\") {\r\n        for (let i = 0; i < (obj as ArrayLike<T>).length; i++) {\r\n            if (i in obj) {\r\n                if (first) {\r\n                    first = false;\r\n                    r = initialValue === undefined ? (obj as any)[i] : callback.call(thisArg, initialValue, (obj as any)[i], i, obj);\r\n                } else {\r\n                    r = callback.call(thisArg, r, (obj as any)[i], i, obj);\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        for (const i in obj) {\r\n            if (first) {\r\n                first = false;\r\n                r = initialValue === undefined ? (obj as any)[i] : callback.call(thisArg, initialValue, (obj as any)[i], i, obj);\r\n            } else {\r\n                r = callback.call(thisArg, r, (obj as any)[i], i, obj);\r\n            }\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 从右往左依次合并类数组中的每一项并最终返回一个值。\r\n * @param obj 类数组。\r\n * @param callback 用于合并两个项的回调函数。函数接收以下参数：\r\n * - previousValue：要合并的前一项。\r\n * - currentValue：要合并的当前项。\r\n * - index：当前项的索引。\r\n * - target：类数组本身。\r\n *\r\n * 函数应合并的结果。\r\n * @param initialValue 用于合并第一项的初始值。\r\n * @param thisArg 执行回调函数时 this 的值。\r\n * @return 返回合并后的最终结果值。\r\n * @example reduceRight([1, 2], function (x, y) { return x + y; }) // 3\r\n * @example reduceRight([1, 2], function (x, y) { return x + y; }, 10) // 13\r\n */\r\nexport function reduceRight<T, R>(obj: ArrayLike<T>, callback: (previousValue: R, currentValue: T, index: number, target: ArrayLike<T>) => R, initialValue?: R, thisArg?: any): R | undefined;\r\n\r\n/**\r\n * 从右往左依次合并对象（函数除外）中的每一项并最终返回一个值。\r\n * @param obj 对象。\r\n * @param callback 用于合并两个项的回调函数。函数接收以下参数：\r\n * - previousValue：要合并的前一项。\r\n * - currentValue：要合并的当前项。\r\n * - key：当前项的键。\r\n * - target：对象本身。\r\n *\r\n * 函数应合并的结果。\r\n * @param initialValue 用于合并第一项的初始值。\r\n * @param thisArg 执行回调函数时 this 的值。\r\n * @return 返回合并后的最终结果值。\r\n * @example reduceRight({a: 1, b: 2}, function (x, y) { return x + y; }) // 3\r\n * @example reduceRight({a: 1, b: 2}, function (x, y) { return x + y; }, 10) // 13\r\n */\r\nexport function reduceRight<T, R>(obj: { [key: string]: T }, callback: (previousValue: R, currentValue: T, key: string, obj: { [key: string]: T }) => R, initialValue?: R, thisArg?: any): R | undefined;\r\n\r\nexport function reduceRight<T, R>(obj: ArrayLike<T> | { [key: string]: T }, callback: (previousValue: R, currentValue: T, key: any, obj: any) => R, initialValue?: R, thisArg?: any) {\r\n    let r: R | undefined;\r\n    let first = true;\r\n    if (obj && typeof (obj as ArrayLike<T>).length === \"number\") {\r\n        for (let i = (obj as ArrayLike<T>).length; --i >= 0;) {\r\n            if (i in obj) {\r\n                if (first) {\r\n                    first = false;\r\n                    r = initialValue === undefined ? (obj as any)[i] : callback.call(thisArg, initialValue, (obj as any)[i], i, obj);\r\n                } else {\r\n                    r = callback.call(thisArg, r, (obj as any)[i], i, obj);\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        const key: string[] = [];\r\n        for (const i in obj) {\r\n            key.push(i);\r\n        }\r\n        for (let i = key.length; --i >= 0;) {\r\n            if (first) {\r\n                first = false;\r\n                r = initialValue === undefined ? (obj as any)[key[i]] : callback.call(thisArg, initialValue, (obj as any)[key[i]], key[i], obj);\r\n            } else {\r\n                r = callback.call(thisArg, r, (obj as any)[key[i]], key[i], obj);\r\n            }\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 判断类数组中是否包含指定的项。\r\n * @param obj 类数组。\r\n * @param value 项。\r\n * @param start 开始查找的索引。\r\n * @return 如果找到匹配的项则返回 true，否则返回 false。\r\n * @example contains([1, 2, 3], 3) // true\r\n * @example contains([1, 2, 3], 4) // false\r\n */\r\nexport function contains<T>(obj: ArrayLike<T>, value: T, start?: number): boolean;\r\n\r\n/**\r\n * 判断对象（函数除外）中是否包含指定的项。\r\n * @param obj 对象。\r\n * @param value 项。\r\n * @param start 开始查找的索引。\r\n * @return 如果找到匹配的项则返回 true，否则返回 false。\r\n * @example contains({a: 1, b: 2, c: 3}, 3) // true\r\n * @example contains({a: 1, b: 2, c: 3}, 4) // false\r\n */\r\nexport function contains<T>(obj: { [key: string]: T }, value: T, start?: string): boolean;\r\n\r\nexport function contains<T>(obj: ArrayLike<T> | { [key: string]: T }, value: T, start?: number | string) {\r\n    if (obj && typeof (obj as ArrayLike<T>).length === \"number\") {\r\n        for (let i = start as number || 0; i < (obj as ArrayLike<T>).length; i++) {\r\n            if ((obj as ArrayLike<T>)[i] === value) {\r\n                return true;\r\n            }\r\n        }\r\n    } else {\r\n        let skip = start !== undefined;\r\n        for (const i in obj) {\r\n            if (skip) {\r\n                if (i !== start) {\r\n                    continue;\r\n                }\r\n                skip = false;\r\n            }\r\n            if ((obj as { [key: string]: T })[i] === value) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * 获取对象包含指定键的子对象。\r\n * @param obj 对象。\r\n * @param keys 键列表。\r\n * @return 返回新对象。\r\n * @example subset({a: 1, b: 2}, [\"a\"]) // {a: 1}\r\n */\r\nexport function subset<T>(obj: { [key: number]: T } | { [key: string]: T }, keys: (string | number)[]) {\r\n    const r: { [key: string]: T } = {};\r\n    for (const key of keys) {\r\n        if (key in obj) {\r\n            r[key] = (obj as any)[key];\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 将对象的键和值对换组成新对象。\r\n * @param obj 对象。\r\n * @return 返回新对象。\r\n * @example invert({a: 1, b: 2, c: 3}) // { 1: \"a\", 2: \"b\", 3: \"c\" }\r\n */\r\nexport function invert(obj: { [key: string]: any }) {\r\n    const r: { [key: string]: any } = {};\r\n    for (const key in obj) {\r\n        r[obj[key]] = key;\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 判断一个对象是否是引用对象。\r\n * @param obj 对象。\r\n * @return 如果对象是引用对象则返回 true，否则返回 false。\r\n * @desc 此函数等效于 `obj !== null && typeof obj === \"object\"`\r\n * @example isObject({}) // true\r\n * @example isObject(null) // false\r\n */\r\nexport function isObject(obj: any): obj is object {\r\n    return obj !== null && typeof obj === \"object\";\r\n}\r\n\r\n/**\r\n * 存储所有内置类型转为字符串的值。\r\n */\r\nlet types: { [key: string]: \"string\" | \"number\" | \"boolean\" | \"undefined\" | \"null\" | \"array\" | \"function\" | \"date\" | \"regexp\" | \"error\" | \"object\"; };\r\n\r\n/**\r\n * 获取对象的类型名。\r\n * @param obj 对象。\r\n * @return 返回类型名。\r\n * @example type(null) // \"null\"\r\n * @example type(undefined) // \"undefined\"\r\n * @example type(new Function) // \"function\"\r\n * @example type(+'a') // \"number\"\r\n * @example type(/a/) // \"regexp\"\r\n * @example type([]) // \"array\"\r\n */\r\nexport function type(obj: any) {\r\n    if (!types) {\r\n        types = { __proto__: null! };\r\n        \"Boolean Number String Function Array Date RegExp Object Error\".replace(/\\w+/g, typeName => types[\"[object \" + typeName + \"]\"] = typeName.toLowerCase() as any);\r\n    }\r\n    return obj == null ? String(obj) as \"null\" | \"undefined\" : types[Object.prototype.toString.call(obj)] || \"object\";\r\n}\r\n\r\n/**\r\n * 计算对象自身的可枚举属性数。\r\n * @param obj 对象。\r\n * @return 返回对象自身的可枚举属性数，原型上的属性会被忽略。\r\n * @example size({a: 1, b: 2}) // 2\r\n * @example size([0, 1]) // 2\r\n */\r\nexport function count(obj: any) {\r\n    let r = 0;\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            r++;\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 判断对象是否为 null、undefined、空字符串、空数组或空对象。\r\n * @param obj 对象。\r\n * @return 如果对象是 null、undefined、false、空字符串、空数组或空对象，则返回 true，否则返回 false。\r\n * @example isEmpty(null) // true\r\n * @example isEmpty(undefined) // true\r\n * @example isEmpty(\"\") // true\r\n * @example isEmpty(\" \") // false\r\n * @example isEmpty([]) // true\r\n * @example isEmpty({}) // true\r\n */\r\nexport function isEmpty(obj: any): obj is null | undefined {\r\n    if (!obj) {\r\n        return true;\r\n    }\r\n    if (typeof obj !== \"object\") {\r\n        return false;\r\n    }\r\n    if (obj.length === 0) {\r\n        return true;\r\n    }\r\n    for (const key in obj) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * 浅拷贝指定的对象。\r\n * @param obj 对象。\r\n * @return 返回拷贝得到的新对象，该对象和原对象无引用关系。\r\n * @desc 出于性能考虑，此函数不会拷贝函数和正则表达式。\r\n * @example clone({a: 3, b: [5]}) // {a: 3, b: [5]}\r\n */\r\nexport function clone<T>(obj: T) {\r\n    if (obj && typeof obj === \"object\") {\r\n        return { ...obj as any };\r\n    }\r\n    return obj;\r\n}\r\n\r\n/**\r\n * 深拷贝一个对象。\r\n * @param obj 对象。\r\n * @param replacer 用于拷贝自定义对象的函数。函数接收一个参数为要拷贝的值，函数应返回拷贝后的新值。\r\n * @return 返回拷贝得到的新对象，该对象的每个层级和原对象都无引用关系。\r\n * @desc 出于性能考虑，此函数不会拷贝函数和正则表达式。\r\n * @example deepCloneSafe({a: 3, b: [5]}) // {a: 3, b: [5]}\r\n */\r\nexport function deepClone<T>(obj: T, replacer?: (obj: any) => any, cloned: any[] = [], clonedResult: any[] = []) {\r\n    if (obj && typeof obj === \"object\") {\r\n        const index = cloned.indexOf(obj);\r\n        if (index >= 0) {\r\n            return clonedResult[index];\r\n        }\r\n        if (obj instanceof Array) {\r\n            const newObj: any = [];\r\n            cloned.push(obj);\r\n            clonedResult.push(newObj);\r\n            for (let i = 0; i < obj.length; i++) {\r\n                newObj[i] = deepClone(obj[i], replacer, cloned, clonedResult);\r\n            }\r\n            obj = newObj;\r\n        } else if (obj instanceof Date) {\r\n            obj = new Date(+obj) as any;\r\n        } else if (!(obj instanceof RegExp)) {\r\n            if (replacer) {\r\n                obj = replacer(obj);\r\n            } else {\r\n                const newObj: any = { __proto__: (obj as any).__proto__ };\r\n                cloned.push(obj);\r\n                clonedResult.push(newObj);\r\n                for (const i in obj) {\r\n                    newObj[i] = deepClone(obj[i], replacer, cloned, clonedResult);\r\n                }\r\n                obj = newObj;\r\n            }\r\n        }\r\n    }\r\n    return obj;\r\n}\r\n\r\n/**\r\n * 深拷贝一个对象。不支持存在循环引用的对象。\r\n * @param obj 对象。\r\n * @param depth 拷贝的最大深度，超过此深度后将直接使用原值。\r\n * @param replacer 用于拷贝自定义对象的函数。函数接收一个参数为要拷贝的值，函数应返回拷贝后的新值。\r\n * @return 返回拷贝得到的新对象，该对象的每个层级和原对象都无引用关系。\r\n * @desc 出于性能考虑，此函数不会拷贝函数和正则表达式。\r\n * @example deepClone({a: 3, b: [5]}) // {a: 3, b: [5]}\r\n */\r\nexport function deepCloneFast<T>(obj: T, replacer?: (obj: any) => any, depth = Infinity) {\r\n    if (obj && typeof obj === \"object\" && depth-- > 0) {\r\n        if (obj instanceof Array) {\r\n            const newObj: any = [];\r\n            for (let i = 0; i < obj.length; i++) {\r\n                newObj[i] = deepCloneFast(obj[i], replacer, depth);\r\n            }\r\n            obj = newObj;\r\n        } else if (obj instanceof Date) {\r\n            obj = new Date(+obj) as any;\r\n        } else if (!(obj instanceof RegExp)) {\r\n            if (replacer) {\r\n                obj = replacer(obj);\r\n            } else {\r\n                const newObj: any = { __proto__: (obj as any).__proto__ };\r\n                for (const i in obj) {\r\n                    newObj[i] = deepCloneFast(obj[i], replacer, depth);\r\n                }\r\n                obj = newObj;\r\n            }\r\n        }\r\n    }\r\n    return obj;\r\n}\r\n\r\n/**\r\n * 比较两个引用对象的内容是否相同。\r\n * @param obj1 要比较的第一个对象。\r\n * @param obj2 要比较的第二个对象。\r\n * @return 如果比较的对象完全相同则返回 true，否则返回 false。\r\n * @example deepEqual([], []) // true\r\n */\r\nexport function deepEqual(obj1: any, obj2: any) {\r\n    if (obj1 && obj2 && typeof obj1 === \"object\" && typeof obj2 === \"object\") {\r\n        if (Array.isArray(obj1) || Array.isArray(obj2)) {\r\n            if (!Array.isArray(obj1) || !Array.isArray(obj2) || obj1.length !== obj2.length) {\r\n                return false;\r\n            }\r\n            for (let i = 0; i < obj1.length; i++) {\r\n                if (!deepEqual(obj1[i], obj2[i])) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        for (const key in obj1) {\r\n            if (!deepEqual(obj1[key], obj2[key])) {\r\n                return false;\r\n            }\r\n        }\r\n        for (const key in obj2) {\r\n            if (!deepEqual(obj1[key], obj2[key])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    return obj1 === obj2;\r\n}\r\n\r\n/**\r\n * 浅比较两个对象的差异。\r\n * @param obj1 要比较的第一个对象。\r\n * @param obj2 要比较的第二个对象。\r\n * @return 返回包含差异信息的对象。该对象列出了只在其中某个对象存在的属性值和公共的属性值。\r\n * @example diff({ a:1, c: 1 }, { b: 1, c: 2 }) // { left: [\"a\"], right: [\"b\"], both: [\"c\"] }\r\n */\r\nexport function diff(obj1: any, obj2: any) {\r\n    const r = {\r\n\r\n        /**\r\n         * 获取仅在左值存在的字段。\r\n         */\r\n        left: [] as string[],\r\n\r\n        /**\r\n         * 获取仅在右值存在的字段。\r\n         */\r\n        right: [] as string[],\r\n\r\n        /**\r\n         * 获取在左右同时存在但其值不同的字段。\r\n         */\r\n        both: [] as string[],\r\n\r\n    };\r\n    for (const key in obj1) {\r\n        if (!(key in obj2)) {\r\n            r.left.push(key);\r\n        } else if (obj1[key] !== obj2[key]) {\r\n            r.both.push(key);\r\n        }\r\n    }\r\n    for (const key in obj2) {\r\n        if (!(key in obj1)) {\r\n            r.right.push(key);\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 深比较两个对象的差异。\r\n * @param obj1 要比较的第一个对象。\r\n * @param obj2 要比较的第二个对象。\r\n * @param depth 比较的最大深度，超过此深度后的差异将被忽略。\r\n * @return 返回包含差异信息的对象。该对象列出了只在其中某个对象存在的属性值和公共的属性值。\r\n * @example deepDiff({ a:1, c: 1 }, { b: 1, c: 2 }) // {left: [\"a\"], right: [\"b\"], both: [\"c\"]}\r\n */\r\nexport function deepDiff(obj1: any, obj2: any, depth = Infinity) {\r\n    const r = {\r\n\r\n        /**\r\n         * 获取仅在左值存在的字段。\r\n         */\r\n        left: [] as string[],\r\n\r\n        /**\r\n         * 获取仅在右值存在的字段。\r\n         */\r\n        right: [] as string[],\r\n\r\n        /**\r\n         * 获取在左右同时存在但其值不同的字段。\r\n         */\r\n        both: [] as string[],\r\n\r\n    };\r\n    diff(obj1, obj2, \"\", depth);\r\n    return r;\r\n\r\n    function diff(x: any, y: any, prefix: string, depth: number) {\r\n        if (depth-- === 0) {\r\n            return;\r\n        }\r\n        for (const key in x) {\r\n            if (!(key in y)) {\r\n                r.left.push(prefix + key);\r\n            } else if (x[key] !== y[key]) {\r\n                if (typeof x[key] !== \"object\" || typeof y[key] !== \"object\") {\r\n                    r.both.push(prefix + key);\r\n                } else {\r\n                    diff(x[key], y[key], prefix + key + \".\", depth);\r\n                }\r\n            }\r\n        }\r\n        for (const key in y) {\r\n            if (!(key in x)) {\r\n                r.right.push(prefix + key);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 删除对象中值为 null 或 undefined 的键。\r\n * @param obj 对象。\r\n * @return 返回原对象。\r\n * @example clean({a: undefined, b: null, c: 3}) // {c: 3}\r\n */\r\nexport function clean(obj: { [key: string]: any }) {\r\n    for (const key in obj) {\r\n        if (obj[key] == null) {\r\n            delete obj[key];\r\n        }\r\n    }\r\n    return obj;\r\n}\r\n\r\n/**\r\n * 返回对象中指定键组成的新对象。\r\n * @param obj 对象。\r\n * @param keys 要选择的所有键。\r\n * @return 返回新对象。\r\n * @example select({a: 1, b: 2, c: 3}, \"a\",  \"c\") // {a: 1, c: 3}\r\n */\r\nexport function select(obj: { [key: string]: any }, ...keys: string[]) {\r\n    const r: { [key: string]: any } = {};\r\n    for (const key of keys) {\r\n        r[key] = obj[key];\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 查找所有参数中第一个不为 undefined 和 null 的值。\r\n * @param values 所有值。\r\n * @return 返回第一个不为 undefined 和 null 的值。如果找不到则返回 undefined。\r\n * @example pick(undefined, null, 1) // 1\r\n */\r\nexport function pick(...values: any[]) {\r\n    for (const value of values) {\r\n        if (value != undefined) {\r\n            return value;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 查找对象中指定值对应的第一个键。\r\n * @param obj 对象。\r\n * @param value 值。\r\n * @return 返回匹配的第一个键，如果找不到则返回 null。\r\n * @example keyOf({a:1, b:1}, 1) // \"a\"\r\n */\r\nexport function keyOf(obj: any, value: any) {\r\n    for (const key in obj) {\r\n        if (obj[key] === value) {\r\n            return key;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * 获取对象指定属性的值。\r\n * @param obj 对象。\r\n * @param prop 要获取的属性表达式。如 `a.b[0]`。\r\n * @return 返回属性值。如果属性不存在则返回 undefined。\r\n * @example get({a: {b: 1}}, \"a.b\") // 1\r\n */\r\nexport function get(obj: any, prop: string) {\r\n    prop.replace(/\\.?\\s*([^\\.\\[]+)|\\[\\s*([^\\]]*)\\s*\\]/g, ((_: string, propName: string, indexer: string) => {\r\n        if (obj) {\r\n            obj = obj[propName || indexer];\r\n        }\r\n    }) as any);\r\n    return obj;\r\n}\r\n\r\n/**\r\n * 设置对象指定属性的值。\r\n * @param obj 对象。\r\n * @param prop 要设置的属性表达式。如 `a.b[0]`。\r\n * @param value 要设置的值。\r\n * @example set({}, \"a[1].b\", 2) // { a: [undefined, { b: 2 }]}\r\n */\r\nexport function set(obj: any, prop: string, value: any) {\r\n    let prevObject: any;\r\n    let prevKey: string;\r\n    prop.replace(/\\.?\\s*([^\\.\\[]+)|\\[\\s*([^\\]]*)\\s*\\]/g, ((source: string, propName: string | undefined, indexer: string | undefined, index: number) => {\r\n        let currentObject = prevKey ? prevObject[prevKey] : obj;\r\n        if (currentObject == null) {\r\n            currentObject = indexer ? [] : {};\r\n            if (prevKey) {\r\n                prevObject[prevKey] = currentObject;\r\n            } else {\r\n                prevObject = obj = currentObject;\r\n            }\r\n        }\r\n        prevObject = currentObject;\r\n        prevKey = propName || indexer!;\r\n        if (index + source.length === prop.length) {\r\n            currentObject[prevKey] = value;\r\n        }\r\n    }) as any);\r\n}\r\n\r\n/**\r\n * 强制覆盖对象的属性值。\r\n * @param obj 对象。\r\n * @param key 要设置的属性名。\r\n * @param value 要设置的属性值。\r\n * @example setProperty({myKey: \"oldValue\"}, \"myKey\", \"newValue\")\r\n */\r\nexport function setProperty(obj: any, key: string, value: any) {\r\n    Object.defineProperty(obj, key, {\r\n        value: value,\r\n        writable: true,\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n}\r\n\r\n/**\r\n * 添加调用指定成员函数后的回调函数。\r\n * @param obj 对象。\r\n * @param key 属性名。\r\n * @param callback 回调函数。函数接收原函数的所有参数。如果原函数返回 undefined 则返回该函数的返回值。\r\n * @example\r\n * var obj = { func: function() { console.log(1); } };\r\n * addCallback(obj, \"func\", function() { console.log(2); } )\r\n * obj.func(); // 输出 1, 2\r\n */\r\nexport function addCallback<T extends any>(obj: T, key: keyof T, callback: Function) {\r\n    const oldFunc = obj[key] as Function;\r\n    obj[key] = oldFunc ? function (this: any) {\r\n        const oldResult = oldFunc.apply(this, arguments);\r\n        const newResult = callback.apply(this, arguments);\r\n        return oldResult !== undefined ? oldResult : newResult;\r\n    } : callback;\r\n}\r\n\r\n/**\r\n * 添加设置指定属性后的回调函数。\r\n * @param obj 对象。\r\n * @param key 属性名。\r\n * @param callback 回调函数。函数接收以下参数：\r\n * - this：当前对象。\r\n * - value：设置的新属性值。\r\n */\r\nexport function addSetCallback<T extends any>(obj: T, key: keyof T, callback: (this: T, value: any) => void) {\r\n    const original = getPropertyDescriptor(obj, key);\r\n    if (original && (original.get || original.set)) {\r\n        Object.defineProperty(obj, key, {\r\n            get: original.get && function (this: any) {\r\n                return original.get!.call(this);\r\n            },\r\n            set: original.set && function (this: any, value) {\r\n                original.set!.call(this, value);\r\n                callback.call(this, value);\r\n            },\r\n        });\r\n    } else {\r\n        let currentValue: any;\r\n        Object.defineProperty(obj, key, {\r\n            get() {\r\n                return currentValue;\r\n            },\r\n            set(value) {\r\n                currentValue = value;\r\n                callback.call(this, value);\r\n            }\r\n        });\r\n    }\r\n}\r\n"],"mappings":"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"}