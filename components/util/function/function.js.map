{"version":3,"file":"function.js","sources":["function.ts"],"sourcesContent":["/**\r\n * 空函数。\r\n */\r\nexport function empty() { }\r\n\r\n/**\r\n * 始终返回第一个参数值的函数。\r\n * @param value 值。\r\n * @return 返回值。\r\n */\r\nexport function self<T>(value: T) {\r\n    return value;\r\n}\r\n\r\n/**\r\n * 创建一个始终返回指定值的函数。\r\n * @param value 新函数要返回的值。\r\n * @return 返回一个新函数，该函数始终返回指定值。\r\n * @example from(false)() // false\r\n */\r\nexport function from<T>(value: T) {\r\n    return () => value;\r\n}\r\n\r\n/**\r\n * 判断对象是否是函数。\r\n * @param obj 对象。\r\n * @return 如果对象是函数则返回 true，否则返回 false。\r\n * @example isFunction(function () {}) // true\r\n * @example isFunction(null) // false\r\n * @example isFunction(new Function()) // true\r\n */\r\nexport function isFunction(obj: any): obj is Function {\r\n    return Object.prototype.toString.call(obj) === \"[object Function]\";\r\n}\r\n\r\n/**\r\n * 创建一个新函数，调用该函数后会依次调用所有原函数。\r\n * @param funcs 要调用的所有原函数。\r\n * @return 返回一个新函数。该函数无返回值。\r\n * @example concat(function (){}, function (){})()\r\n */\r\nexport function concat<T extends (...args: any[]) => void>(...funcs: T[]) {\r\n    return function (this: any) {\r\n        for (const fn of funcs) {\r\n            fn && fn.apply(this, arguments);\r\n        }\r\n    } as any as T;\r\n}\r\n\r\n/**\r\n * 创建一个新函数，调用该函数后，重复调用原函数指定次数。\r\n * @param fn 要调用的原函数。\r\n * @param count 要调用的次数。\r\n * @return 返回一个新函数。\r\n * @example repeat(()=> console.log(\"hello\"), 3)() // 输出 3 个 hello\r\n */\r\nexport function repeat<T extends Function>(fn: T, count = 0) {\r\n    return function (this: any) {\r\n        for (let i = 0; i < count; i++) {\r\n            fn.apply(this, arguments);\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * 创建一个新函数，仅在第一次调用该函数时调用原函数。\r\n * @param fn 要调用的原函数。\r\n * @return 返回一个新函数。\r\n */\r\nexport function once<T extends Function>(fn: T) {\r\n    let called = false;\r\n    let r: any;\r\n    return function (this: any) {\r\n        if (called) {\r\n            return r;\r\n        }\r\n        called = true;\r\n        return r = fn.apply(this, arguments);\r\n    } as any as T;\r\n}\r\n\r\n/**\r\n * 创建一个新函数，多次调用该函数时，仅在第一次调用原函数。\r\n * @param fn 要调用的原函数。\r\n * @param count 调用的次数。\r\n * @return 返回一个新函数。\r\n * @example\r\n * var done = before(() => console.log(\"hello\"), 2);\r\n * done();  // 输出 hello\r\n * done();  // 不输出\r\n */\r\nexport function before<T extends Function>(fn: T, count: number) {\r\n    let i = -1;\r\n    return function (this: any) {\r\n        if (++i === count) {\r\n            i = 0;\r\n        }\r\n        if (i === 0) {\r\n            return fn.apply(this, arguments);\r\n        }\r\n    } as any as T;\r\n}\r\n\r\n/**\r\n * 创建一个新函数，多次调用该函数时，仅在最后一次调用原函数。\r\n * @param fn 要调用的原函数。\r\n * @param count 调用的次数。\r\n * @return 返回一个新函数。\r\n * @example\r\n * var done = after(() => console.log(\"hello\"), 2);\r\n * done();  // 不输出\r\n * done();  // 输出 hello\r\n */\r\nexport function after<T extends Function>(fn: T, count: number) {\r\n    let i = 0;\r\n    return function (this: any) {\r\n        if (++i === count) {\r\n            i = 0;\r\n            return fn.apply(this, arguments);\r\n        }\r\n    } as any as T;\r\n}\r\n\r\n/**\r\n * 创建一个新函数，在指定时间内多次调用该函数时，仅在第一次调用原函数。\r\n * @param fn 要调用的原函数。\r\n * @param timeout 超时的毫秒数。\r\n * @return 返回一个新函数。\r\n */\r\nexport function limit<T extends Function>(fn: T, timeout = 0) {\r\n    let last: number;\r\n    let timer: any;\r\n    return function (this: any) {\r\n        const remaining = last ? timeout - (Date.now() - last) : -1;\r\n        if (remaining < 0) {\r\n            last = Date.now();\r\n            return fn.apply(this, arguments);\r\n        }\r\n        if (!timer) {\r\n            const args = arguments;\r\n            timer = setTimeout(() => {\r\n                timer = 0;\r\n                fn.apply(this, args);\r\n            }, remaining);\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * 创建一个新函数，多次调用该函数时，仅在参数发生变化后调用原函数。\r\n * @param fn 要调用的原函数。\r\n * @return 返回一个新函数。\r\n */\r\nexport function cache<T extends Function>(fn: T) {\r\n    const caches: any[] = [];\r\n    return function (...args: any[]) {\r\n        for (const cache of caches) {\r\n            if (args.length === cache.length) {\r\n                let allSame = true;\r\n                for (let i = 0; i < cache.length; i++) {\r\n                    if (cache[i] !== args[i]) {\r\n                        allSame = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (allSame) {\r\n                    return cache.r;\r\n                }\r\n            }\r\n        }\r\n        caches.push(args);\r\n        return (args as any).r = fn(...args);\r\n    } as any as T;\r\n}\r\n\r\n/**\r\n * 创建一个新函数，调用该函数后，延时调用原函数。\r\n * @param fn 要调用的原函数。\r\n * @param timeout 延时的毫秒数。\r\n * @return 返回一个新函数。\r\n * @example delay(() => console.log(\"延时执行\"), 100)()\r\n */\r\nexport function delay<T extends Function>(fn: T, timeout = 0) {\r\n    return function (this: any) {\r\n        const args = arguments;\r\n        setTimeout(() => {\r\n            fn.apply(this, args);\r\n        }, timeout);\r\n    } as any as T;\r\n}\r\n\r\n/**\r\n * 创建一个新函数，调用该函数后，延时调用原函数。如果在延时等待期间有新的调用，则重新开始计时。\r\n * @param fn 要调用的原函数。\r\n * @param timeout 延时的毫秒数。\r\n * @return 返回一个新函数。\r\n * @example document.onscroll = defer(() => console.log(\"延时执行\"), 100);\r\n */\r\nexport function defer<T extends Function>(fn: T, duration = 0) {\r\n    let timer: number;\r\n    return function (this: any) {\r\n        const args = arguments;\r\n        timer && clearTimeout(timer);\r\n        timer = setTimeout(() => {\r\n            timer = 0;\r\n            fn.apply(this, args);\r\n        }, duration) as any;\r\n    } as any as T;\r\n}\r\n\r\n/**\r\n * 创建一个新函数，调用该函数后每隔指定时间调用一次原函数。\r\n * @param fn 要调用的原函数，函数接收以下参数：\r\n * - count：当前执行的次数。\r\n *\r\n * 如果函数返回 false 则停止执行。\r\n * @param count 执行的次数。如果指定为 -1 则无限次执行。\r\n * @param timeout 每次执行之间的间隔毫秒数。\r\n * @example interval(function (a) { console.log(a) }, 10, 400)\r\n */\r\nexport function interval(fn: (count: number) => boolean | void, count = -1, timeout = 0) {\r\n    progress(0);\r\n    function progress(value: number) {\r\n        if (value !== count && fn(value) !== false) {\r\n            setTimeout(progress, timeout, value + 1);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 依次执行多个函数，如果函数没有发生异常则返回，否则继续执行下一个函数。\r\n * @param funcs 要调用的所有函数。\r\n * @return 返回第一个未发生异常的函数的返回值。如果所有函数都发生异常则返回 undefined。\r\n * @example\r\n * var xhr = tryThese(() => new ActiveXObject(\"Microsoft.XMLHttp\"), () => new XMLHttpRequest())\r\n */\r\nexport function tryThese(...funcs: Function[]) {\r\n    for (const fn of funcs) {\r\n        try {\r\n            return fn();\r\n        } catch (e) { }\r\n    }\r\n}\r\n\r\n/**\r\n * 获取函数不含参数部分的源码。\r\n * @param fn 函数。\r\n * @return 返回源码。根据执行环境的不同，其中可能包含注释。\r\n * @example getSource(x => x)\r\n */\r\nexport function getSource(fn: Function) {\r\n    return fn.toString().replace(/^function\\s+[^(]*\\s*\\(.*?\\)\\s*\\{[\\r\\n]*/, \"\").replace(/\\s*\\}\\s*$/, \"\").replace(/^(?:\\([^)]*\\)|[^=]+)\\s*=>\\s*/, \"\").replace(/\\\\u([0-9a-f]{3})([0-9a-f])/gi, (a: string, b: string, c: string) => String.fromCharCode((parseInt(b, 16) * 16 + parseInt(c, 16))));\r\n}\r\n"],"mappings":"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"}