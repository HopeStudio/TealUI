{"version":3,"file":"searchPinYin.js","sources":["searchPinYin.ts"],"sourcesContent":["import { getPinYinOfChar } from \"util/pinyin\";\r\nimport { encodeHTML } from \"util/html\";\r\n\r\n/**\r\n * 模糊搜索一个列表（支持拼音）。\r\n * @param inputs 被搜索的所有列表项。\r\n * @param search 要搜索的内容。\r\n * @param markStart 用于标记匹配开始的标记。\r\n * @param markEnd 用于标记匹配结束的标记。\r\n * @param encoder 用于编码源内容的回调函数。源内容被编码后可以避免将内容和匹配标记混淆。\r\n * @param cache 如果提供了缓存对象则可以加速第二次搜索的速度。\r\n * @return 返回所有的匹配项组成的数组。每个匹配项是一个包含所有匹配起止位置的数组，并附加了以下属性：\r\n * - r：当前匹配项最终拼接后的文本内容。\r\n * - index：当前匹配项在源列表的索引。\r\n * @example searchPinYin([\"ab\", \"b\"], \"a\") // [ {r: \"<mark>a</mark>b\", index: 0, length: 1, 0: {start: 0, end: 1, level: 1}} ]\r\n */\r\nexport default function searchPinYin(inputs: string[], search: string, markStart = \"<mark>\", markEnd = \"</mark>\", encoder = encodeHTML, cache: { [key: string]: any } = { __proto__: null }) {\r\n    search = search.trim().toLowerCase();\r\n    const r: (Match[] & { r: string, index: number })[] = [];\r\n    for (let i = 0; i < inputs.length; i++) {\r\n        const m = matchPinYin(inputs[i], search, cache) as typeof r[0];\r\n        if (m.length) {\r\n            m.index = i;\r\n            m.r = formatMatch(inputs[i], m, markStart, markEnd, encoder);\r\n            r.push(m);\r\n        }\r\n    }\r\n    r.sort(compare);\r\n    return r;\r\n}\r\n\r\n/**\r\n * 表示一个匹配项。\r\n */\r\nexport interface Match {\r\n\r\n    /**\r\n     * 匹配项在源字符串中的开始索引（从 0 开始）。\r\n     */\r\n    start: number;\r\n\r\n    /**\r\n     * 匹配项在源字符串中的结束索引（从 0 开始）。\r\n     */\r\n    end: number;\r\n\r\n    /**\r\n     * 匹配度。匹配度为精确匹配的字符数。\r\n     */\r\n    level: number;\r\n\r\n}\r\n\r\n/**\r\n * 获取单个内容的拼音匹配结果。\r\n * @param input 被匹配的内容。\r\n * @param pattern 要匹配的模式。\r\n * @param cache 如果提供了缓存对象则可以加速第二次匹配的速度。\r\n * @return 返回包含所有匹配起止位置的数组。如果不匹配则返回空数组。\r\n * @example matchPinYin(\"ab\", \"a\") // [{start: 0, end: 1, level: 1}]\r\n */\r\nexport function matchPinYin(input: string, pattern: string, cache: { [key: string]: any } = { __proto__: null }) {\r\n    let info = cache[input];\r\n    if (!info) {\r\n        cache[input] = info = {\r\n            chars: [],\r\n            pinyins: []\r\n        };\r\n        input = input.toLowerCase();\r\n        for (let i = 0; i < input.length; i++) {\r\n            info.chars.push(input.charCodeAt(i));\r\n            info.pinyins.push(getPinYinOfChar(input.charAt(i)));\r\n        }\r\n    }\r\n\r\n    const r = [] as Match[];\r\n    next: for (let i = 0; i < info.chars.length; i++) {\r\n        let charIndex = i;\r\n        let patternIndex = 0;\r\n        let level = 0;\r\n        while (patternIndex < pattern.length) {\r\n            if (charIndex >= info.chars.length) {\r\n                continue next;\r\n            }\r\n            if (info.chars[charIndex] === pattern.charCodeAt(patternIndex)) {\r\n                patternIndex++;\r\n                level++;\r\n            } else {\r\n                let matchCount: number | undefined;\r\n                for (const pinyin of info.pinyins[charIndex]) {\r\n                    matchCount = searchStart(pinyin, pattern, patternIndex);\r\n                    if (matchCount) {\r\n                        patternIndex += matchCount;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!matchCount) {\r\n                    continue next;\r\n                }\r\n            }\r\n            charIndex++;\r\n        }\r\n        r.push({ level: level, start: i, end: charIndex });\r\n        i = charIndex;\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 搜索字符串和指定子字符串的相同前缀字符数。\r\n * @param value 被搜索的字符串。\r\n * @param child 要搜索的子字符串。\r\n * @param childIndex 子字符串中开始搜索的索引。\r\n * @return 返回最大匹配的字符数。如果无匹配则返回 0。\r\n * @internal\r\n */\r\nexport function searchStart(value: string, child: string, childIndex: number) {\r\n    let r = 0;\r\n    while (r < value.length && childIndex + r < child.length && value.charCodeAt(r) === child.charCodeAt(childIndex + r)) {\r\n        r++;\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 比较两个匹配结果。\r\n * @param result1 要比较的第一个结果。\r\n * @param result2 要比较的第二个结果。\r\n * @return 如果 result1 更匹配则返回 -1，如果 result2 更匹配则返回 1，如果 result1 和 result2 匹配度相当则返回 0。\r\n */\r\nfunction compare(result1: Match[], result2: Match[]) {\r\n    if (result1.length && result2.length && result1[0].start !== result2[0].start) {\r\n        return result2[0].end - result1[0].end;\r\n    }\r\n    return result2.length - result1.length;\r\n}\r\n\r\n/**\r\n * 格式化匹配结果为一个字符串。\r\n * @param input 被匹配的内容。\r\n * @param matchResult 包含所有匹配起止位置的数组。\r\n * @param markStart 用于标记匹配开始的标记。\r\n * @param markEnd 用于标记匹配结束的标记。\r\n * @param encoder 用于编码源内容的回调函数。源内容被编码后可以避免将内容和匹配标记混淆。\r\n * @return 返回拼接后的文本内容。\r\n * @example matchPinYin(\"ab\", [{start: 0, end: 1, level: 1}]) // \"<mark>a</mark>b\"\r\n */\r\nexport function formatMatch(input: string, matchResult: Match[], markStart = \"<mark>\", markEnd = \"</mark>\", encoder = encodeHTML) {\r\n    for (let i = matchResult.length; i-- > 0;) {\r\n        const match = matchResult[i];\r\n        input = encoder(input.slice(0, match.start)) + markStart + encoder(input.slice(match.start, match.end)) + markEnd + (i === matchResult.length - 1 ? encoder(input.slice(match.end)) : input.slice(match.end));\r\n    }\r\n    return input;\r\n}\r\n"],"mappings":"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"}