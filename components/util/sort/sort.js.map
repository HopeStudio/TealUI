{"version":3,"file":"sort.js","sources":["sort.ts"],"sourcesContent":["/**\r\n * 对类数组进行冒泡排序。\r\n * @param list 要排序的类数组。\r\n * @param compareFn 用于排序时确定顺序的函数。函数接收以下参数：\r\n * - x：要比较的第一个参数。\r\n * - y：要比较的第二个参数。\r\n *\r\n * 如果返回 true，则说明 *x* 应该排在 *y* 之前。否则 *x* 应该排在 *y* 之后。\r\n * @param start 开始排序的索引（从 0 开始）。\r\n * @param end 结束排序的索引（从 0 开始）。\r\n * @return 返回原类数组。\r\n * @desc 冒泡排序是稳定排序算法，时间复杂度为 O(n²)。\r\n * @example bubbleSort([1, 3, 5, 4, 3]) // [1, 3, 3, 4, 5]\r\n */\r\nexport function bubbleSort<T>(list: ArrayList<T>, compareFn = (x: T, y: T) => x < y, start = 0, end = list.length) {\r\n    for (; start < end; start++) {\r\n        for (let i = start + 1; i < end; i++) {\r\n            if (compareFn(list[i], list[start]) as any > 0) {\r\n                const t = list[start];\r\n                list[start] = list[i];\r\n                list[i] = t;\r\n            }\r\n        }\r\n    }\r\n    return list;\r\n}\r\n\r\n/**\r\n * 对类数组进行快速排序。\r\n * @param list 要排序的类数组。\r\n * @param compareFn 用于排序时确定顺序的函数。函数接收以下参数：\r\n * - x：要比较的第一个参数。\r\n * - y：要比较的第二个参数。\r\n *\r\n * 如果返回 true，则说明 *x* 应该排在 *y* 之前。否则 *x* 应该排在 *y* 之后。\r\n * @param start 开始排序的索引（从 0 开始）。\r\n * @param end 结束排序的索引（从 0 开始）。\r\n * @return 返回原类数组。\r\n * @desc 快速排序是不稳定排序算法，时间复杂度为 O(n*log(n))。\r\n * @example quickSort([1, 3, 5, 4, 3]) // [1, 3, 3, 4, 5]\r\n */\r\nexport function quickSort<T>(list: ArrayList<T>, compareFn = (x: T, y: T) => x < y, start = 0, end = list.length) {\r\n    if (start < end) {\r\n        const t = list[start];\r\n        let low = start;\r\n        let high = end;\r\n        do {\r\n            while (high > low && !compareFn(list[high], t) as any > 0) {\r\n                high--;\r\n            }\r\n            if (low < high) {\r\n                list[low++] = list[high];\r\n            }\r\n            while (low < high && compareFn(list[low], t) as any > 0) {\r\n                low++;\r\n            }\r\n            if (low < high) {\r\n                list[high--] = list[low];\r\n            }\r\n        } while (low < high);\r\n        list[low] = t;\r\n        quickSort(list, compareFn, start, high - 1);\r\n        quickSort(list, compareFn, high + 1, end);\r\n    }\r\n    return list;\r\n}\r\n\r\n/**\r\n * 对类数组进行希尔排序。\r\n * @param list 要排序的类数组。\r\n * @param compareFn 用于排序时确定顺序的函数。函数接收以下参数：\r\n * - x：要比较的第一个参数。\r\n * - y：要比较的第二个参数。\r\n *\r\n * 如果返回 true，则说明 *x* 应该排在 *y* 之前。否则 *x* 应该排在 *y* 之后。\r\n * @param start 开始排序的索引（从 0 开始）。\r\n * @param end 结束排序的索引（从 0 开始）。\r\n * @return 返回原类数组。\r\n * @desc 快速排序是不稳定排序算法，适用于数据量不大的情况。\r\n * @example shellSort([1, 3, 5, 4, 3]) // [1, 3, 3, 4, 5]\r\n */\r\nexport function shellSort<T>(list: ArrayList<T>, compareFn = (x: T, y: T) => x < y, start = 0, end = list.length) {\r\n    for (let gap = (end - start) >> 1; gap > 0; gap >>= 1) {\r\n        for (let i = gap + start; i < end; i++) {\r\n            const t = list[i];\r\n            let j = i;\r\n            for (; j - gap >= start && compareFn(t, list[j - gap]) as any > 0; j -= gap) {\r\n                list[j] = list[j - gap];\r\n            }\r\n            list[j] = t;\r\n        }\r\n    }\r\n    return list;\r\n}\r\n\r\n/**\r\n * 表示一个类数组。\r\n */\r\nexport interface ArrayList<T> {\r\n\r\n    /**\r\n     * 获取列表的长度。\r\n     */\r\n    readonly length: number;\r\n\r\n    /**\r\n     * 获取或设置指定索引的值。\r\n     */\r\n    [index: number]: T;\r\n\r\n}\r\n"],"mappings":"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"}