{"version":3,"file":"query.js","sources":["query.ts"],"sourcesContent":["/**\r\n * 解析查询字符串（如“foo=1&goo=2&goo=3”）为对象。\r\n * @param value 要解析的查询字符串。\r\n * @param separator 不同查询参数的分隔符。\r\n * @param equal 查询参数名和参数值的分隔符。\r\n * @return 返回一个以每个查询参数名作为键、查询参数值作为值的新对象。同名的参数对应的值是一个数组。\r\n * @example parseQuery(\"foo=1&goo=2&goo=3\") // { foo: \"1\", goo: [\"2\", \"3\"] }\r\n */\r\nexport function parseQuery(value: string, separator = \"&\", equal = \"=\") {\r\n    const r: { [key: string]: any } = {};\r\n    if (value) {\r\n        for (const pair of value.split(separator)) {\r\n            const kv = pair.split(equal, 2);\r\n            const key = decodeURIComponent(kv[0]);\r\n            const value = decodeURIComponent(kv[1]);\r\n            const exist = r[key];\r\n            if (Array.isArray(exist)) {\r\n                exist.push(value);\r\n            } else if (typeof exist === \"string\") {\r\n                r[key] = [exist, value];\r\n            } else {\r\n                r[key] = value;\r\n            }\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 格式化对象为查询字符串（如“foo=1&goo=2&goo=3”）。\r\n * @param obj 要格式化的对象。\r\n * @param separator 不同查询参数的分隔符。\r\n * @param equal 查询参数名和参数值的分隔符。\r\n * @return 返回格式化后的字符串。\r\n * @example formatQuery({ a: \"2\", c: \"4\" }) // \"a=2&c=4\"\r\n * @example formatQuery({ a: [2, 4] }) // \"a=2&a=4\"\r\n */\r\nexport function formatQuery(obj: any, separator = \"&\", equal = \"=\") {\r\n    const parts: string[] = [];\r\n    for (const key in obj) {\r\n        const value = obj[key];\r\n        if (Array.isArray(value)) {\r\n            for (const item of value) {\r\n                parts.push(`${key}${equal}${encodeURIComponent(item)}`);\r\n            }\r\n        } else {\r\n            parts.push(`${key}${equal}${encodeURIComponent(value)}`);\r\n        }\r\n    }\r\n    return parts.join(separator);\r\n}\r\n\r\n/**\r\n * 获取地址中指定的查询参数值。\r\n * @param name 查询参数名。\r\n * @param url 原地址。\r\n * @return 返回查询参数值。如果找不到则返回 null。\r\n * @example getQuery(\"foo\", \"?foo=1\") // \"1\"\r\n * @example getQuery(\"goo\", \"?foo=1\") // null\r\n */\r\nexport function getQuery(name: string, url = location.href) {\r\n    let match = /\\?([^#]*)/.exec(url);\r\n    if (match) {\r\n        match = new RegExp(\"(?:^|&)\" + encodeURIComponent(name).replace(/([\\-.*+?^${}()|[\\]\\/\\\\])/g, \"\\\\$1\") + \"=([^&]*)(?:&|$)\", \"i\").exec(match[1]);\r\n        if (match) {\r\n            return decodeURIComponent(match[1]);\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * 设置地址中指定的查询参数值。\r\n * @param name 查询参数名。\r\n * @param value 要设置的查询参数值。如果值为 null 则删除指定的查询参数。\r\n * @param url 原地址。\r\n * @return 返回设置后的新地址。如果原参数不存在则添加到末尾。\r\n * @example setQuery(\"foo\", \"1\", \"page.html\") // \"page.html?foo=1\"\r\n * @example setQuery(\"foo\", \"2\", \"page.html?foo=1\") // \"page.html?foo=2\"\r\n * @example setQuery(\"foo\", null, \"page.html\") // \"page.html\"\r\n */\r\nexport function setQuery(name: string, value: string | null | undefined, url = location.href) {\r\n    const match = /^(.*?)(\\?.*?)?(#.*)?$/.exec(url)!;\r\n    match[0] = \"\";\r\n    if (value != null) {\r\n        value = encodeURIComponent(name) + \"=\" + encodeURIComponent(value);\r\n    }\r\n    if (match[2]) {\r\n        match[2] = match[2].replace(new RegExp(\"([?&])\" + name.replace(/([-.*+?^${}()|[\\]\\/\\\\])/g, \"\\$1\") + \"(=[^&]*)?(&|$)\"), (source: string, left: string, oldValue: string, right: string) => {\r\n            source = value == null ? right && left : left + value + right;\r\n            // 标记已解析过。\r\n            value = null;\r\n            return source;\r\n        });\r\n    }\r\n    if (value != null) {\r\n        match[2] = (match[2] ? match[2] === \"?\" ? \"?\" : match[2] + \"&\" : \"?\") + value;\r\n    }\r\n    return match.join(\"\");\r\n}\r\n\r\n/**\r\n * 在地址后添加请求参数。\r\n * @param url 地址。\r\n * @param query 要添加的请求参数，以查询字符串格式且不含“?”。\r\n * @return 返回已添加的新地址。\r\n * @example appendQuery(\"index.html\", \"from=link\") // \"index.html?from=link\"\r\n */\r\nexport function appendQuery(url: string, query: string | null | undefined) {\r\n    return query != null ? url + (url.indexOf(\"?\") >= 0 ? \"&\" : \"?\") + query : url;\r\n}\r\n"],"mappings":"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"}