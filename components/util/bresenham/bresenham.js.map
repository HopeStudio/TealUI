{"version":3,"file":"bresenham.js","sources":["bresenham.ts"],"sourcesContent":["import { Point } from \"util/rect\";\r\n\r\n/**\r\n * 生成一个贝塞尔曲线。\r\n * @param startX 起始点的水平坐标（单位：像素）。\r\n * @param startY 起始点的垂直坐标（单位：像素）。\r\n * @param endX 结束点的水平坐标（单位：像素）。\r\n * @param endY 结束点的垂直坐标（单位：像素）。\r\n * @param callback 处理生成的点的回调函数。函数接收以下参数：\r\n * - x：生成点的水平坐标（单位：像素）。\r\n * - y：生成点的垂直坐标（单位：像素）。\r\n */\r\nexport default function bresenham(startX: number, startY: number, endX: number, endY: number, callback: (x: number, y: number) => void): void;\r\n\r\n/**\r\n * 生成一个贝塞尔曲线。\r\n * @param startX 起始点的水平坐标（单位：像素）。\r\n * @param startY 起始点的垂直坐标（单位：像素）。\r\n * @param endX 结束点的水平坐标（单位：像素）。\r\n * @param endY 结束点的垂直坐标（单位：像素）。\r\n * @return 返回生成的点坐标数组。\r\n */\r\nexport default function bresenham(startX: number, startY: number, endX: number, endY: number): Point[];\r\n\r\nexport default function bresenham(startX: number, startY: number, endX: number, endY: number, callback?: (x: number, y: number) => void) {\r\n    let r: Point[] | undefined;\r\n    if (!callback) {\r\n        r = [];\r\n    }\r\n    const dx = endX - startX;\r\n    const dy = endY - startY;\r\n    const adx = Math.abs(dx);\r\n    const ady = Math.abs(dy);\r\n    const sx = dx > 0 ? 1 : -1;\r\n    const sy = dy > 0 ? 1 : -1;\r\n    let eps = 0;\r\n    if (adx > ady) {\r\n        for (let x = startX, y = startY; sx < 0 ? x >= endX : x <= endX; x += sx) {\r\n            if (callback) {\r\n                callback(x, y);\r\n            } else {\r\n                r!.push({ x, y });\r\n            }\r\n            eps += ady;\r\n            if ((eps << 1) >= adx) {\r\n                y += sy;\r\n                eps -= adx;\r\n            }\r\n        }\r\n    } else {\r\n        for (let x = startX, y = startY; sy < 0 ? y >= endY : y <= endY; y += sy) {\r\n            if (callback) {\r\n                callback(x, y);\r\n            } else {\r\n                r!.push({ x, y });\r\n            }\r\n            eps += adx;\r\n            if ((eps << 1) >= ady) {\r\n                x += sx;\r\n                eps -= ady;\r\n            }\r\n        }\r\n    }\r\n    return r!;\r\n}\r\n"],"mappings":";;IAwBA,mBAAkC,MAAc,EAAE,MAAc,EAAE,IAAY,EAAE,IAAY,EAAE,QAAyC;QACnI,IAAI,CAAsB,CAAC;QAC3B,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACZ,CAAC,GAAG,EAAE,CAAC;QACX,CAAC;QACD,IAAM,EAAE,GAAG,IAAI,GAAG,MAAM,CAAC;QACzB,IAAM,EAAE,GAAG,IAAI,GAAG,MAAM,CAAC;QACzB,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACzB,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACzB,IAAM,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3B,IAAM,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3B,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;YACZ,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;gBACvE,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACX,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACnB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,CAAE,CAAC,IAAI,CAAC,EAAE,CAAC,GAAA,EAAE,CAAC,GAAA,EAAE,CAAC,CAAC;gBACtB,CAAC;gBACD,GAAG,IAAI,GAAG,CAAC;gBACX,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;oBACpB,CAAC,IAAI,EAAE,CAAC;oBACR,GAAG,IAAI,GAAG,CAAC;gBACf,CAAC;YACL,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;gBACvE,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACX,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACnB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,CAAE,CAAC,IAAI,CAAC,EAAE,CAAC,GAAA,EAAE,CAAC,GAAA,EAAE,CAAC,CAAC;gBACtB,CAAC;gBACD,GAAG,IAAI,GAAG,CAAC;gBACX,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;oBACpB,CAAC,IAAI,EAAE,CAAC;oBACR,GAAG,IAAI,GAAG,CAAC;gBACf,CAAC;YACL,CAAC;QACL,CAAC;QACD,MAAM,CAAC,CAAE,CAAC;IACd,CAAC;IAxCD,4BAwCC"}