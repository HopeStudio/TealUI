{"version":3,"file":"events.js","sources":["events.ts"],"sourcesContent":["/**\r\n * 表示一个事件触发器。\r\n */\r\nexport default class EventEmitter {\r\n\r\n    /**\r\n     * 存储所有事件。\r\n     */\r\n    private _events: { [eventName: string]: Function | Function[] };\r\n\r\n    /**\r\n     * 添加一个事件。\r\n     * @param eventName 要添加的事件名。\r\n     * @param eventHandler 要添加的事件处理函数。\r\n     * @example\r\n     * var ee = new EventEmitter();\r\n     * ee.on(\"error\", data => console.log(data));    // 绑定 error 事件\r\n     * ee.emit(\"error\", \"hello\");                    // 触发 error 事件，输出 hello\r\n     */\r\n    on(eventName: string, eventHandler: Function) {\r\n        const events = this._events || (this._events = { __proto__: null! });\r\n        const eventHandlers = events[eventName];\r\n        if (Array.isArray(eventHandlers)) {\r\n            eventHandlers.push(eventHandler);\r\n        } else if (events[eventName] != null) {\r\n            events[eventName] = [events[eventName], eventHandler] as any\r\n        } else {\r\n            events[eventName] = eventHandler;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 删除一个或多个事件。\r\n     * @param eventName 要删除的事件名。如果不传递此参数，则删除所有事件处理函数。\r\n     * @param eventHandler 要删除的事件处理函数。如果不传递此参数，则删除指定事件的所有监听器。如果同一个监听器被添加多次，则只删除第一个。\r\n     * @example\r\n     * var fn = data => console.log(data);\r\n     * var ee = new EventEmitter();\r\n     * ee.on(\"error\", fn);                       // 绑定 error 事件\r\n     * ee.off(\"error\", fn);                      // 解绑 error 事件\r\n     * ee.emit(\"error\", \"hello\");                // 触发 error 事件，不输出内容\r\n     */\r\n    off(eventName?: string, eventHandler?: Function) {\r\n        const events = this._events;\r\n        if (events) {\r\n            if (eventName) {\r\n                const eventHandlers = events[eventName];\r\n                if (eventHandlers) {\r\n                    if (eventHandler) {\r\n                        if (Array.isArray(eventHandlers)) {\r\n                            const index = eventHandlers.indexOf(eventHandler);\r\n                            if (index >= 0) {\r\n                                eventHandlers.splice(index, 1);\r\n                                eventHandler = eventHandlers.length as any;\r\n                            }\r\n                        } else if (eventHandlers === eventHandler) {\r\n                            eventHandler = undefined;\r\n                        }\r\n                    }\r\n                    if (!eventHandler) {\r\n                        delete events[eventName];\r\n                    }\r\n                }\r\n            } else {\r\n                delete this._events;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 触发一个事件。\r\n     * @param eventName 要触发的事件名。\r\n     * @param eventArgs 传递给监听器的所有参数。\r\n     * @return 如果已执行一个或多个监听器则返回 true，否则返回 false。\r\n     * @example\r\n     * var ee = new EventEmitter();\r\n     * ee.on(\"error\", data => console.log(data));    // 绑定 error 事件\r\n     * ee.emit(\"error\", \"hello\");                    // 触发 error 事件，输出 hello\r\n     */\r\n    emit(eventName: string, ...eventArgs: any[]) {\r\n        let t: any = this._events;\r\n        if (t && (t = t[eventName])) {\r\n            if (typeof t === \"function\") {\r\n                t.apply(this, eventArgs);\r\n            } else {\r\n                for (const eventHandler of t.slice(0)) {\r\n                    eventHandler.apply(this, eventArgs);\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n}\r\n"],"mappings":"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"}