{"version":3,"file":"path.js","sources":["path.ts"],"sourcesContent":["/**\r\n * @see https://github.com/joyent/node/blob/master/lib/path.js\r\n */\r\n\r\n/**\r\n * 判断路径是否为绝对路径。\r\n * @param path 要判断的路径。\r\n * @return 如果是绝对路径则返回 true，否则返回 false。\r\n */\r\nexport function isAbsolute(path: string) {\r\n    return path.length > 0 && path.charCodeAt(0) === 47/*/*/;\r\n}\r\n\r\n/**\r\n * 合并多个路径为一个绝对路径。\r\n * @param paths 要合并的所有路径。\r\n * @return 返回合并后的新路径。\r\n * @example resolve(\"a/b\", \"../\", \"c\") // \"a/c\"\r\n */\r\nexport function resolve(...paths: string[]) {\r\n    let resolvedPath = \"\";\r\n    let resolvedAbsolute = false;\r\n\r\n    for (let i = paths.length - 1; i >= 0 && !resolvedAbsolute; i--) {\r\n        const path = paths[i];\r\n        if (path) {\r\n            resolvedPath = path + \"/\" + resolvedPath;\r\n            resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\r\n        }\r\n    }\r\n\r\n    return ((resolvedAbsolute ? \"/\" : \"\") + normalizeParts(resolvedPath.split(\"/\"), !resolvedAbsolute).join(\"/\")) || \"\";\r\n}\r\n\r\n/**\r\n * 计算路径相对于基路径的相对路径。\r\n * @param basePath 解析的基路径。\r\n * @param path 路径。\r\n * @return 返回 *path* 相对于 *basePath* 的基路径。\r\n * @example relative(\"a/b\", \"a/c\") // \"../c\"\r\n */\r\nexport function relative(basePath: string, path: string) {\r\n\r\n    basePath = resolve(basePath);\r\n    path = resolve(path);\r\n\r\n    const fromParts = trim(basePath.split(\"/\"));\r\n    const toParts = trim(path.split(\"/\"));\r\n\r\n    const length = Math.min(fromParts.length, toParts.length);\r\n    let samePartsLength = length;\r\n    for (var i = 0; i < length; i++) {\r\n        if (fromParts[i] !== toParts[i]) {\r\n            samePartsLength = i;\r\n            break;\r\n        }\r\n    }\r\n\r\n    const outputParts: string[] = [];\r\n    for (let i = samePartsLength; i < fromParts.length; i++) {\r\n        outputParts.push(\"..\");\r\n    }\r\n\r\n    outputParts.push.apply(outputParts, toParts.slice(samePartsLength));\r\n\r\n    return outputParts.join(\"/\");\r\n\r\n    function trim(arr: string[]) {\r\n        let start = 0;\r\n        for (; start < arr.length && !arr[start]; start++);\r\n\r\n        let end = arr.length - 1;\r\n        for (; end >= 0 && !arr[end]; end--);\r\n\r\n        return start > end ? [] : arr.slice(start, end + 1);\r\n    }\r\n}\r\n\r\n/**\r\n * 规范化路径的格式。\r\n * @param path 路径。\r\n * @return 返回规范化后的新路径。其中不再包含多余的 . 和 /。\r\n * @example normalize(\"a/b/../c/d/e\") // \"a/c/d/e\"\r\n */\r\nexport function normalize(path: string) {\r\n    const isAbsolute = path.charAt(0) === \"/\";\r\n    const trailingSlash = path.substr(-1) === \"/\";\r\n    path = normalizeParts(path.split(\"/\"), !isAbsolute).join(\"/\");\r\n    if (!path && !isAbsolute) path = \".\";\r\n    if (path && trailingSlash) path += \"/\";\r\n    return (isAbsolute ? \"/\" : \"\") + path;\r\n}\r\n\r\n/**\r\n * 合并多个路径为一个。\r\n * @param paths 要合并的所有路径。\r\n * @return 返回合并后的新路径。\r\n * @example join(\"a/b/../c/d/e\") // \"a/c/d/e\"\r\n */\r\nexport function join(...paths: string[]) {\r\n    const parts = [];\r\n    for (const path of paths) {\r\n        if (path) parts.push(path);\r\n    }\r\n    return normalize(parts.join(\"/\"));\r\n}\r\n\r\n/**\r\n * 获取路径的文件夹名部分。\r\n * @param path 路径。\r\n * @return 返回文件夹部分。\r\n * @example Path.dirname(\"e/a/b\") // \"e/a\"\r\n */\r\nexport function dirname(path: string) {\r\n    const parts = splitPath(path);\r\n    const root = parts[1];\r\n    const dir = parts[2];\r\n    return !root && !dir ? \".\" : root + (dir && dir.substr(0, dir.length - 1));\r\n}\r\n\r\n/**\r\n * 获取路径的文件名部分。\r\n * @param path 路径。\r\n * @param ext 如果指定扩展名，则删除对应的扩展名部分。\r\n * @return 返回文件部分。\r\n * @example Path.basename(\"e/a/b.txt\") // \"b.txt\"\r\n */\r\nexport function basename(path: string, ext?: string) {\r\n    const parts = splitPath(path);\r\n    return ext && parts[4] === ext ? parts[3].substr(0, parts[3].length - ext.length) : parts[3];\r\n}\r\n\r\n/**\r\n * 获取路径的扩展名部分（包括点）。\r\n * @param path 路径。\r\n * @return 返回扩展名部分（包括点）。\r\n * @example Path.extname(\"e/a/b.txt\") // \".txt\"\r\n */\r\nexport function extname(path: string) {\r\n    return splitPath(path)[4];\r\n}\r\n\r\n/**\r\n * 规范化路径数组。\r\n * @param parts 路径组成部分。\r\n * @param allowAboveRoot 是否允许超过根路径。\r\n * @return 返回规范化后的路径组成部分。\r\n */\r\nfunction normalizeParts(parts: string[], allowAboveRoot: boolean) {\r\n    let up = 0;\r\n    for (let i = parts.length - 1; i >= 0; i--) {\r\n        const last = parts[i];\r\n        if (!last || last === \".\") {\r\n            parts.splice(i, 1);\r\n        } else if (last === \"..\") {\r\n            parts.splice(i, 1);\r\n            up++;\r\n        } else if (up) {\r\n            parts.splice(i, 1);\r\n            up--;\r\n        }\r\n    }\r\n\r\n    if (allowAboveRoot) {\r\n        while (up--) {\r\n            parts.unshift(\"..\");\r\n        }\r\n    }\r\n\r\n    return parts;\r\n}\r\n\r\n/**\r\n * 将文件名分割为数组。\r\n * @param path 文件名。\r\n * @return 返回一个数组。其内容分别为根路径、文件夹、文件基础名和扩展名。\r\n */\r\nfunction splitPath(path: string) {\r\n    return /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/.exec(path)!;\r\n}\r\n"],"mappings":"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"}