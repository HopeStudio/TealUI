{"version":3,"file":"date.js","sources":["date.ts"],"sourcesContent":["const dateFormators = {\r\n    __proto__: null,\r\n    y: (date: Date, format: string) => {\r\n        const year = date.getFullYear();\r\n        return format.length < 3 ? year % 100 : year;\r\n    },\r\n    M: (date: Date) => date.getMonth() + 1,\r\n    d: (date: Date) => date.getDate(),\r\n    H: (date: Date) => date.getHours(),\r\n    m: (date: Date) => date.getMinutes(),\r\n    s: (date: Date) => date.getSeconds(),\r\n    e: (date: Date) => \"日一二三四五六\".charAt(date.getDay())\r\n};\r\n\r\n/**\r\n * 格式化日期对象。\r\n * @param date 日期对象。\r\n * @param format 格式字符串，其中以下字符（区分大小写）会被替换：\r\n *\r\n * 字符| 意义          | 示例\r\n * ----|--------------|--------------------\r\n * y   | 年           | yyyy: 1999, yy: 99\r\n * M   | 月           | MM: 09, M: 9\r\n * d   | 日           | dd: 09, d: 9\r\n * H   | 时（24小时制）| HH: 13, H: 13\r\n * m   | 分           | mm: 06, m: 6\r\n * s   | 秒           | ss: 06, s: 6\r\n * e   | 周（中文）    | 周e: 周一\r\n *\r\n * @return 返回格式化后的字符串。\r\n * @example format(new Date(\"2016/01/01 00:00:00\")) // \"2016/01/01 00:00:00\"\r\n * @example format(new Date(\"2016/01/01 00:00:00\"), \"yyyyMMdd\") // \"20160101\"\r\n * @see https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html\r\n */\r\nexport function format(date = new Date(), format = \"yyyy/MM/dd HH:mm:ss\") {\r\n    return format.replace(/([yMdHms])\\1*/g, (all: string, key: string) => {\r\n        key = (dateFormators as any)[key](date, all) + \"\";\r\n        while (key.length < all.length) {\r\n            key = \"0\" + key;\r\n        }\r\n        return key;\r\n    });\r\n}\r\n\r\n/**\r\n * 解析字符串为日期对象。\r\n * @param value 要解析的字符串。默认格式可以是标准日期格式或 “yyyy-MM-dd” 或 “yyyyMMdd”。\r\n * @param format 如果指定了格式字符串，将按其格式解析日期，格式字符串中以下字符（区分大小写）会被填充为原数据：\r\n *\r\n * 字符| 意义         | 示例\r\n * ----|--------------|------\r\n * y   | 年           | 2014\r\n * M   | 月           | 9\r\n * d   | 日           | 9\r\n * H   | 时（24小时制）| 9\r\n * y   | 分           | 6\r\n * y   | 秒           | 6\r\n * @return 返回新日期对象。\r\n * @example parse(\"2014-1-1\") // new Date(\"2014/1/1\")\r\n * @example parse(\"20140101\") // new Date(\"2014/1/1\")\r\n * @example parse(\"2014年1月1日\", \"yyyy年MM月dd日\") // new Date(\"2014/1/1\")\r\n */\r\nexport function parse(value: string, format?: string) {\r\n    if (format) {\r\n        const groups = [0];\r\n        const obj: any = {};\r\n        const match = new RegExp(format.replace(/([-.*+?^${}()|[\\]\\/\\\\])/g, \"\\$1\")\r\n            .replace(/([yMdHms])\\1*/g, (all, w) => {\r\n                groups.push(w);\r\n                return \"\\\\s*(\\\\d+)?\\\\s*\";\r\n            })).exec(value);\r\n        if (match) {\r\n            for (let i = 1; i < match.length; i++) {\r\n                obj[groups[i]] = +match[i];\r\n            }\r\n        }\r\n        return new Date(obj.y || new Date().getFullYear(), obj.M ? obj.M - 1 : new Date().getMonth(), obj.d || 1, obj.H || 0, obj.m || 0, obj.s || 0);\r\n    }\r\n    const obj = new Date(value);\r\n    return +obj ? obj : new Date(String(value).replace(/(\\d{4})\\D*(\\d\\d?)\\D*(\\d\\d?).*(\\d\\d?)\\D*(\\d\\d?)\\D*(\\d\\d?)/, \"$1/$2/$3 $4:$5:$6\").replace(/(\\d{4})\\D*(\\d\\d?)\\D*(\\d\\d?)/, \"$1/$2/$3\"));\r\n}\r\n\r\n/**\r\n * 创建当前日期对象的副本。\r\n * @return 返回新日期对象。\r\n * @example clone(new Date(\"2014/1/1\")) // new Date(\"2014/1/1\")\r\n */\r\nexport function clone(date: Date) {\r\n    return new Date(+date);\r\n}\r\n\r\n/**\r\n * 计算日期添加指定年数后的新日期。\r\n * @param value 要添加的年数。如果小于 0 则倒数。\r\n * @return 返回新日期对象。\r\n * @example addYear(new Date(\"2014/1/1\"), 1) // new Date(\"2015/1/1\")\r\n */\r\nexport function addYear(date: Date, value: number) {\r\n    const r = new Date(+date);\r\n    r.setFullYear(date.getFullYear() + value);\r\n    return r;\r\n}\r\n\r\n/**\r\n * 计算日期添加指定月数后的新日期。\r\n * @param value 要添加的月数。如果小于 0 则倒数。\r\n * @return 返回新日期对象。\r\n * @example addMonth(new Date(\"2014/1/1\"), 1) // new Date(\"2014/2/1\")\r\n */\r\nexport function addMonth(date: Date, value: number) {\r\n    const r = new Date(+date);\r\n    r.setMonth(r.getMonth() + value);\r\n    if (date.getDate() !== r.getDate()) {\r\n        r.setDate(0);\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * 计算日期添加指定周后的新日期。\r\n * @param value 要添加的周数。如果小于 0 则倒数。\r\n * @return 返回新日期对象。\r\n * @example addWeek(new Date(\"2014/1/1\"), 1) // new Date(\"2014/1/8\")\r\n */\r\nexport function addWeek(date: Date, value: number) {\r\n    return new Date(+date + value * 604800000);\r\n}\r\n\r\n/**\r\n * 计算日期添加指定天数后的新日期。\r\n * @param value 要添加的天数。如果小于 0 则倒数。\r\n * @return 返回新日期对象。\r\n * @example addDay(new Date(\"2014/1/1\"), 1) // new Date(\"2014/1/2\")\r\n */\r\nexport function addDay(date: Date, value: number) {\r\n    return new Date(+date + value * 86400000);\r\n}\r\n\r\n/**\r\n * 计算日期添加指定小时后的新日期。\r\n * @param value 要添加的小时数。如果小于 0 则倒数。\r\n * @return 返回新日期对象。\r\n * @example addHours(new Date(\"2014/1/1\"), 1) // new Date(\"2014/1/1 01:00:00\")\r\n */\r\nexport function addHours(date: Date, value: number) {\r\n    return new Date(+date + value * 3600000);\r\n}\r\n\r\n/**\r\n * 计算日期添加指定分数后的新日期。\r\n * @param value 要添加的分钟数。如果小于 0 则倒数。\r\n * @return 返回新日期对象。\r\n * @example addMinutes(new Date(\"2014/1/1\"), 1) // new Date(\"2014/1/1 00:01:00\")\r\n */\r\nexport function addMinutes(date: Date, value: number) {\r\n    return new Date(+date + value * 60000);\r\n}\r\n\r\n/**\r\n * 计算日期添加指定秒后的新日期。\r\n * @param value 要添加的秒数。如果小于 0 则倒数。\r\n * @return 返回新日期对象。\r\n * @example addSeconds(new Date(\"2014/1/1\"), 1) // new Date(\"2014/1/1 00:00:01\")\r\n */\r\nexport function addSeconds(date: Date, value: number) {\r\n    return new Date(+date + value * 1000);\r\n}\r\n\r\n/**\r\n * 计算日期添加指定毫秒后的新日期。\r\n * @param value 要添加的毫秒数。如果小于 0 则倒数。\r\n * @return 返回新日期对象。\r\n * @example addMilliseconds(new Date(\"2014/1/1\"), 1000) // new Date(\"2014/1/1 00:00:01\")\r\n */\r\nexport function addMilliseconds(date: Date, value: number) {\r\n    return new Date(+date + value);\r\n}\r\n\r\n/**\r\n * 获取日期的日期部分。\r\n * @return 返回新日期对象，其小时部分已被清零。\r\n * @example toDay(new Date(\"2014/1/1 12:00:00\")) // new Date(\"2014/1/1\")\r\n */\r\nexport function toDay(date: Date) {\r\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate());\r\n}\r\n\r\n/**\r\n * 获取日期的第一天。\r\n * @param date 日期对象。\r\n * @return 返回新日期对象。\r\n * @example toFirstDay(new Date(\"2016/2/15\")) // new Date(\"2016/2/1\")\r\n */\r\nexport function toFirstDay(date: Date) {\r\n    const r = new Date(+date);\r\n    r.setDate(1);\r\n    return r;\r\n}\r\n\r\n/**\r\n * 获取日期的最后一天。\r\n * @param date 日期对象。\r\n * @return 返回新日期对象。\r\n * @example toLastDay(new Date(\"2016/2/15\")) // new Date(\"2016/2/29\")\r\n */\r\nexport function toLastDay(date: Date) {\r\n    const r = new Date(+date);\r\n    r.setDate(1);\r\n    r.setMonth(r.getMonth() + 1);\r\n    r.setDate(r.getDate() - 1);\r\n    return r;\r\n}\r\n\r\n/**\r\n * 获取日期的时区部分。\r\n * @return 返回时区部分。\r\n * @example getTimezone(new Date(\"Fri Feb 17 2017 16:54:41 GMT+0800\")) // \"GMT\"\r\n */\r\nexport function getTimezone(date: Date) {\r\n    return date.toString()\r\n        .replace(/^.*? ([A-Z]{3}).[0-9]{4}.*$/, \"$1\")\r\n        .replace(/^.*?\\(([A-Z])[a-z]+ ([A-Z])[a-z]+ ([A-Z])[a-z]+\\)$/, \"$1$2$3\");\r\n}\r\n\r\n/**\r\n * 获取日期所在的周数。\r\n * @param date 日期对象。\r\n * @param base 作为第一周的日期。如果未指定则使用今年第一天作为第一周。\r\n * @return 返回周数。\r\n * @example getWeek(new Date(\"2014/1/15\")) // 3\r\n * @example getWeek(new Date(\"2014/1/15\"), new Date(\"2014/1/1\")) // 3\r\n */\r\nexport function getWeek(date: Date, base = new Date(date.getFullYear(), 0, 1)) {\r\n    return Math.floor(((date as any) - (base as any)) / 604800000) + 1;\r\n}\r\n\r\n/**\r\n * 获取两个日期相差的年份。\r\n * @param x 比较的第一个日期。\r\n * @param y 比较的第二个日期\r\n * @return 返回 *x* 减去 *y* 相差的天数。不满一年的部分会被忽略。\r\n * @example compareYear(new Date(2014, 1, 1), new Date(2013, 1, 2)) // 1\r\n */\r\nexport function compareYear(x: Date, y: Date) {\r\n    const monthX = x.getMonth();\r\n    const monthY = y.getMonth();\r\n    return x.getFullYear() - y.getFullYear() - (monthX < monthY || monthX === monthY && x.getDate() < y.getDate() ? 1 : 0);\r\n}\r\n\r\n/**\r\n * 获取两个日期相差的天数。\r\n * @param x 比较的第一个日期。\r\n * @param y 比较的第二个日期\r\n * @return 返回 *x* 减去 *y* 相差的天数。不足一天的部分会被忽略。\r\n * @example compareDay(new Date(2014, 1, 2), new Date(2014, 1, 1)) // 1\r\n */\r\nexport function compareDay(x: Date, y: Date) {\r\n    return Math.floor((x as any - (y as any)) / 86400000);\r\n}\r\n\r\n/**\r\n * 计算日期到最近的指定月日的剩余天数。如果今年指定月日已过，则计算到明年该月日的剩余天数。\r\n * @param date 日期对象。\r\n * @param month 月。\r\n * @param day 天。\r\n * @return 返回剩余天数。\r\n * @example dayLeft(new Date(\"2014/12/3\"), 12, 5) // 2\r\n * @example dayLeft(new Date(\"2014/12/4\"), 12, 5) // 1\r\n * @example dayLeft(new Date(\"2014/12/5\"), 12, 5) // 0\r\n * @example dayLeft(new Date(\"2014/12/6\"), 12, 5) // 364\r\n */\r\nexport function dayLeft(date: Date, month: number, day: number) {\r\n    const tmp = new Date(date.getFullYear(), date.getMonth(), date.getDate());\r\n    let offset = new Date(date.getFullYear(), month - 1, day) as any - (tmp as any);\r\n    if (offset < 0) {\r\n        offset = new Date(date.getFullYear() + 1, month - 1, day) as any - (tmp as any);\r\n    }\r\n    return offset / 86400000;\r\n}\r\n\r\n/**\r\n * 判断指定数值所表示的日期是否合法（如 2 月 30 日是不合法的）。\r\n * @param year 年。\r\n * @param month 月。\r\n * @param day 日。\r\n * @param hour 时。\r\n * @param minute 分。\r\n * @param second 秒。\r\n * @param milliSecond 毫秒。\r\n * @return 如果提供的数组能组成有效的日期则返回 true，否则返回 false。\r\n * @example isValid(2000, 2, 29) // false\r\n * @example isValid(2004, 2, 29) // true\r\n */\r\nexport function isValid(year: number, month: number, day = 1, hour = 0, minute = 0, second = 0, milliSecond = 0) {\r\n    const date = new Date(year, month - 1, day, hour, minute, second, milliSecond);\r\n    return year === date.getFullYear() && month === date.getMonth() + 1 && day === date.getDate() && hour === date.getHours() && minute === date.getMinutes() && second === date.getSeconds() && milliSecond === date.getMilliseconds();\r\n}\r\n\r\n/**\r\n * 判断指定年份是否是闰年。\r\n * @param year 要判断的年份。\r\n * @return 如果年份是闰年则返回 true，否则返回 false。\r\n * @example isLeapYear(2004) // true\r\n * @example isLeapYear(2000) // true\r\n * @example isLeapYear(2100) // false\r\n * @example isLeapYear(2002) // false\r\n */\r\nexport function isLeapYear(year: number) {\r\n    return (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;\r\n}\r\n\r\n/**\r\n * 获取指定年的指定月的天数。\r\n * @param year 年。\r\n * @param month 月。\r\n * @return 返回天数。\r\n * @example getDayInMonth(2001, 1) // 31\r\n * @example getDayInMonth(2001, 2) // 28\r\n * @example getDayInMonth(2004, 2) // 29\r\n */\r\nexport function getDayInMonth(year: number, month: number) {\r\n    return (new Date(year, month) as any - (new Date(year, month - 1) as any)) / 86400000;\r\n}\r\n"],"mappings":"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"}