{"version":3,"file":"rect.js","sources":["rect.ts"],"sourcesContent":["/**\r\n * 表示一个坐标。\r\n */\r\nexport interface Point {\r\n\r\n    /**\r\n     * 相对于屏幕左上角的水平距离（单位为像素）。\r\n     */\r\n    x: number;\r\n\r\n    /**\r\n     * 相对于屏幕左上角的垂直距离（单位为像素）。\r\n     */\r\n    y: number;\r\n\r\n}\r\n\r\n/**\r\n * 表示一个大小。\r\n */\r\nexport interface Size {\r\n\r\n    /**\r\n     * 宽度（单位为像素）。\r\n     */\r\n    width: number;\r\n\r\n    /**\r\n     * 高度（单位为像素）。\r\n     */\r\n    height: number;\r\n\r\n}\r\n\r\n/**\r\n * 表示一个矩形区域。\r\n */\r\nexport interface Rect extends Point, Size { }\r\n\r\n/**\r\n * 判断一个点是否在指定的矩形区域（含边框）内。\r\n * @param rect 矩形区域。\r\n * @param point 要判断的点。\r\n * @return 如果在区域内或区域边界上则返回 true，否则返回 false。\r\n * @example inRect({x: 0, y: 0, width: 10, height: 10}, {x: 20, y: 20}) // false\r\n * @example inRect({x: 0, y: 0, width: 10, height: 10}, {x: 5, y: 5}) // true\r\n * @example inRect({x: 0, y: 0, width: 10, height: 10}, {x: 0, y: 0}) // true\r\n */\r\nexport function inRect(rect: Rect, point: Point) {\r\n    return point.x >= rect.x && point.x <= rect.x + rect.width && point.y >= rect.y && point.y <= rect.y + rect.height;\r\n}\r\n\r\n/**\r\n * 判断一个点是否在指定的矩形区域的边框上。\r\n * @param rect 矩形区域。\r\n * @param point 要判断的点。\r\n * @return 如果在区域边界上则返回 true，否则返回 false。\r\n * @example onRect({x: 0, y: 0, width: 10, height: 10}, {x: 20,y: 20}) // false\r\n * @example onRect({x: 0, y: 0, width: 10, height: 10}, {x: 5, y: 5}) // false\r\n * @example onRect({x: 0, y: 0, width: 10, height: 10}, {x: 0, y: 0}) // true\r\n * @example onRect({x: 0, y: 0, width: 10, height: 10}, {x: 0, y: 3}) // true\r\n */\r\nexport function onRect(rect: Rect, point: Point) {\r\n    return point.y >= rect.y && point.y <= rect.y + rect.height && (point.x === rect.x || point.x === rect.x + rect.width) || point.x >= rect.x && point.x <= rect.x + rect.width && (point.y === rect.y || point.y === rect.y + rect.height);\r\n}\r\n\r\n/**\r\n * 计算区域偏移指定距离后的新区域。\r\n * @param rect 区域。\r\n * @param offset 要偏移的距离。\r\n * @return 返回新区域。\r\n * @example offsetRect({x: 0, y: 0, width: 10, height: 10}, {x: 10, y: 20}) // {x: 10, y: 20, width: 10, height: 10}\r\n */\r\nexport function offsetRect(rect: Rect, offset: Point) {\r\n    rect.x += offset.x;\r\n    rect.y += offset.y;\r\n    return rect;\r\n}\r\n\r\n/**\r\n * 计算两个区域的交集部分。\r\n * @param rect1 要计算的第一个区域。\r\n * @param rect2 要计算的第二个区域。\r\n * @return 返回公共区域。如果区域无交集则返回长宽为 0 的区域。\r\n * @example intersectRect({x: 0, y: 0, width: 10, height: 10}, {x: 5, y: 5, width: 10, height: 10}) // {x: 5, y: 5, width: 5, height: 5}\r\n * @example intersectRect({x: 0, y: 0, width: 10, height: 10}, {x: 11, y: 11, width: 10, height: 10}) // {x: 0, y: 0, width: 0, height: 0}\r\n */\r\nexport function intersectRect(rect1: Rect, rect2: Rect): Rect {\r\n    if (inRect(rect2, rect1)) {\r\n        const t = rect1;\r\n        rect1 = rect2;\r\n        rect2 = t;\r\n    }\r\n    if (inRect(rect1, rect2)) {\r\n        return {\r\n            x: rect2.x,\r\n            y: rect2.y,\r\n            width: Math.min(rect1.x + rect1.width, rect2.x + rect2.width) - rect2.x,\r\n            height: Math.min(rect1.y + rect1.height, rect2.y + rect2.height) - rect2.y\r\n        };\r\n    }\r\n    return {\r\n        x: 0,\r\n        y: 0,\r\n        width: 0,\r\n        height: 0\r\n    };\r\n}\r\n\r\n/**\r\n * 计算两个区域的并集部分。\r\n * @param rect1 要计算的第一个区域。\r\n * @param rect2 要计算的第二个区域。\r\n * @return 返回并集区域。如果区域无交集则返回长宽为 0 的区域。\r\n * @example unionRect({x: 0, y: 0, width: 10, height: 10}, {x: 5, y: 5, width: 10, height: 10}) // {x: 0, y: 0, width: 15, height: 15}\r\n * @example unionRect({x: 0, y: 0, width: 10, height: 10}, {x: 5, y: 5, width: 2, height: 2}) // {x: 0, y: 0, width: 10, height: 10}\r\n * @example unionRect({x: 0, y: 0, width: 10, height: 10}, {x: 15, y: 15, width: 10, height: 10}) // {x: 0, y: 0, width: 25, height: 25}\r\n */\r\nexport function unionRect(rect1: Rect, rect2: Rect) {\r\n    const r = {\r\n        x: rect1.x < rect2.x ? rect1.x : rect2.x,\r\n        y: rect1.y < rect2.y ? rect1.y : rect2.y\r\n    } as Rect;\r\n    r.width = Math.max(rect1.x + rect1.width, rect2.x + rect2.width) - r.x;\r\n    r.height = Math.max(rect1.y + rect1.height, rect2.y + rect2.height) - r.y;\r\n    return r;\r\n}\r\n\r\n/**\r\n * 表示一个正圆区域。\r\n */\r\nexport interface Circle extends Point {\r\n\r\n    /**\r\n     * 圆型的半径（单位：像素）。\r\n     */\r\n    r: number;\r\n\r\n}\r\n\r\n/**\r\n * 判断一个点是否在指定的正圆区域（含边框）内。\r\n * @param circle 要判断的正圆区域。\r\n * @param point 要判断的点。\r\n * @return 如果在区域内或区域边界上则返回 true，否则返回 false。\r\n * @example inCircle({x: 2, y: 2, r: 1}, {x: 2, y: 2}) // true\r\n * @example inCircle({x: 2, y: 2, r: 1}, {x: 3, y: 2}) // true\r\n * @example inCircle({x: 2, y: 2, r: 1}, {x: 4, y: 2}) // false\r\n * @example inCircle({x: 2, y: 2, r: 1}, {x: 3, y: 3}) // false\r\n */\r\nexport function inCircle(circle: Circle, point: Point) {\r\n    return (circle.x - point.x) ** 2 + (circle.y - point.y) ** 2 <= circle.r ** 2;\r\n}\r\n\r\n/**\r\n * 判断一个点是否在指定的正圆区域边框上。\r\n * @param circle 要判断的正圆区域。\r\n * @param point 要判断的点。\r\n * @return 如果在区域内或区域边界上则返回 true，否则返回 false。\r\n * @example onCircle({x: 2, y: 2, r: 1}, {x: 3, y: 2}) // true\r\n * @example onCircle({x: 2, y: 2, r: 1}, {x: 2, y: 2}) // false\r\n * @example onCircle({x: 2, y: 2, r: 1}, {x: 4, y: 2}) // false\r\n * @example onCircle({x: 2, y: 2, r: 1}, {x: 3, y: 3}) // false\r\n */\r\nexport function onCircle(circle: Circle, point: Point) {\r\n    return (circle.x - point.x) ** 2 + (circle.y - point.y) ** 2 === circle.r ** 2;\r\n}\r\n"],"mappings":"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"}