{"version":3,"file":"cron.js","sources":["cron.ts"],"sourcesContent":["/**\r\n * 创建一个计划任务。\r\n * @param cronExpression 计划时间表达式。\r\n * @param callback 要执行的任务函数。\r\n * @param now 服务器下发的当前时间。\r\n */\r\nexport default function crobJob(cronExpression: string, callback: () => void, now = new Date()) {\r\n    const r = new CronJob();\r\n    r.cronExpression = new CronExpression(cronExpression);\r\n    r.callback = callback;\r\n    r.offset = ((now as any) - (new Date() as any)) / 1000;\r\n    r.start();\r\n    return r;\r\n}\r\n\r\n/**\r\n * 表示一个计划任务。\r\n */\r\nexport class CronJob {\r\n\r\n    /**\r\n     * 计划时间表达式。\r\n     */\r\n    cronExpression: CronExpression;\r\n\r\n    /**\r\n     * 任务回调函数。\r\n     */\r\n    callback: () => void;\r\n\r\n    /**\r\n     * 客户端时间与实际时间的误差秒数。\r\n     */\r\n    offset?: number;\r\n\r\n    /**\r\n     * 启动当前任务。\r\n     */\r\n    start() {\r\n        if (this._timer) {\r\n            return;\r\n        }\r\n        const now = new Date();\r\n        if (this.offset) {\r\n            now.setSeconds(now.getSeconds() + this.offset);\r\n        }\r\n        now.setMilliseconds(0);\r\n        if (this.cronExpression.match(now)) {\r\n            setTimeout(() => {\r\n                this.callback();\r\n            }, 0);\r\n        }\r\n        const next = this.cronExpression.next(now);\r\n        // 浏览器最大支持延时 2147483647ms，根据实际使用场景，忽略超出情况。\r\n        this._timer = setTimeout(() => {\r\n            setTimeout(() => {\r\n                if (this._timer) {\r\n                    this._timer = 0;\r\n                    this.start();\r\n                }\r\n            }, 1000);\r\n            this.callback();\r\n        }, (next as any) - (now as any));\r\n    }\r\n\r\n    /**\r\n     * 停止当前任务。\r\n     */\r\n    stop() {\r\n        if (this._timer) {\r\n            clearTimeout(this._timer);\r\n            this._timer = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 计时器。\r\n     */\r\n    private _timer: any;\r\n\r\n}\r\n\r\n/**\r\n * 表示一个计划时间表达式。\r\n * @see http://www.quartz-scheduler.org/documentation/quartz-2.x/tutorials/crontrigger.html\r\n */\r\nexport class CronExpression {\r\n\r\n    /**\r\n     * 秒部分的匹配规则。\r\n     */\r\n    seconds?: CronRule[];\r\n\r\n    /**\r\n     * 分部分的匹配规则。\r\n     */\r\n    minutes?: CronRule[];\r\n\r\n    /**\r\n     * 小时部分的匹配规则。\r\n     */\r\n    hours?: CronRule[];\r\n\r\n    /**\r\n     * 日期部分的匹配规则。\r\n     */\r\n    dayOfMonth?: CronRule[];\r\n\r\n    /**\r\n     * 月部分的匹配规则。\r\n     */\r\n    month?: CronRule[];\r\n\r\n    /**\r\n     * 星期部分的匹配规则。\r\n     */\r\n    dayOfWeek?: CronRule[];\r\n\r\n    /**\r\n     * 年部分的匹配规则。\r\n     */\r\n    year?: CronRule[];\r\n\r\n    /**\r\n     * 初始化新的计划时间表达式。\r\n     * @param source 计划时间表达式。\r\n     */\r\n    constructor(source: string) {\r\n        const parts = source.split(\" \");\r\n        // 为了兼容 crontab，支持仅 5 个字段时作省略秒处理。\r\n        if (parts.length === 5) parts.unshift(\"0\");\r\n        this.seconds = CronExpression._parseRules(parts[0]);\r\n        this.minutes = CronExpression._parseRules(parts[1]);\r\n        this.hours = CronExpression._parseRules(parts[2]);\r\n        this.dayOfMonth = CronExpression._parseRules(parts[3], 1);\r\n        this.month = CronExpression._parseRules(parts[4] && parts[4].toUpperCase().replace(/[A-Z]{3}/g, word => ({\r\n            JAN: 0,\r\n            FEB: 1,\r\n            MAR: 2,\r\n            APR: 3,\r\n            MAY: 4,\r\n            JUN: 5,\r\n            JUL: 6,\r\n            AUG: 7,\r\n            SEP: 8,\r\n            OCT: 9,\r\n            NOV: 10,\r\n            DEC: 11\r\n        } as any)[word]));\r\n        this.dayOfWeek = CronExpression._parseRules(parts[5] && parts[5].toUpperCase().replace(/[A-Z]{3}/g, word => ({\r\n            SUN: 0,\r\n            MON: 1,\r\n            TUE: 2,\r\n            WED: 3,\r\n            THU: 4,\r\n            FRI: 5,\r\n            SAT: 6\r\n        } as any)[word]));\r\n        this.year = CronExpression._parseRules(parts[6], 1970);\r\n    }\r\n\r\n    /**\r\n     * 解析一个规则列表。\r\n     * @param rules 要解析的规则列表。\r\n     * @param start 当前规则开始数值。\r\n     * @return 返回解析结果。\r\n     */\r\n    private static _parseRules(rules: string | undefined, start?: number) {\r\n        if (!rules) {\r\n            return;\r\n        }\r\n        const r: CronRule[] = [];\r\n        for (const rule of rules.split(\",\")) {\r\n            const match = /^(?:\\*?|(\\d+)(?:-(\\d+))?)(?:\\/(\\d+))?$/.exec(rule);\r\n            if (match) {\r\n                if (!match[1] && !match[3]) {\r\n                    r.length = 0;\r\n                    break;\r\n                }\r\n                r.push({\r\n                    start: match[1] ? +match[1] : start || 0,\r\n                    end: match[2] ? +match[2] : undefined,\r\n                    step: match[3] ? +match[3] : undefined\r\n                });\r\n            }\r\n        }\r\n        return r;\r\n    }\r\n\r\n    /**\r\n     * 获取到指定日期最近的计划时间。\r\n     * @param date 日期。\r\n     * @return 返回最近的日期对象。\r\n     */\r\n    next(date: Date) {\r\n        const value = +date + 1000;\r\n        date = new Date(value - value % 1000);\r\n        while (true) {\r\n            let t: number;\r\n            if (!CronExpression._matchRules(this.year, t = date.getFullYear())) {\r\n                date.setFullYear(t + 1);\r\n                date.setMonth(0);\r\n                date.setDate(1);\r\n                date.setHours(0);\r\n                date.setMinutes(0);\r\n                date.setSeconds(0);\r\n                continue;\r\n            }\r\n            if (!CronExpression._matchRules(this.month, t = date.getMonth())) {\r\n                date.setMonth(t + 1);\r\n                date.setDate(1);\r\n                date.setHours(0);\r\n                date.setMinutes(0);\r\n                date.setSeconds(0);\r\n                continue;\r\n            }\r\n            const dayOfMonthMismatch = !CronExpression._matchRules(this.dayOfMonth, t = date.getDate());\r\n            const dayOfWeekMismatch = !CronExpression._matchRules(this.dayOfWeek, date.getDay());\r\n            if ((!this.dayOfMonth || this.dayOfMonth.length === 0) && dayOfWeekMismatch || (!this.dayOfWeek || this.dayOfWeek.length === 0) && dayOfMonthMismatch || dayOfMonthMismatch && dayOfWeekMismatch) {\r\n                date.setDate(t + 1);\r\n                date.setHours(0);\r\n                date.setMinutes(0);\r\n                date.setSeconds(0);\r\n                continue;\r\n            }\r\n            if (!CronExpression._matchRules(this.hours, t = date.getHours())) {\r\n                date.setHours(t + 1);\r\n                date.setMinutes(0);\r\n                date.setSeconds(0);\r\n                continue;\r\n            }\r\n            if (!CronExpression._matchRules(this.minutes, t = date.getMinutes())) {\r\n                date.setMinutes(t + 1);\r\n                date.setSeconds(0);\r\n                continue;\r\n            }\r\n            if (!CronExpression._matchRules(this.seconds, t = date.getSeconds())) {\r\n                date.setSeconds(t + 1);\r\n                continue;\r\n            }\r\n            break;\r\n        }\r\n        return date;\r\n    }\r\n\r\n    /**\r\n     * 测试指定的值是否匹配指定的表达式。\r\n     * @param rules 字段信息。\r\n     * @param value 要验证的数值。\r\n     * @return 如果匹配则返回 true，否则返回 false。\r\n     */\r\n    private static _matchRules(rules: CronRule[] | undefined, value: number) {\r\n        if (!rules || !rules.length) {\r\n            return true;\r\n        }\r\n        for (const rule of rules) {\r\n            if (rule.step! > 1 && (value - rule.start) % rule.step! !== 0) {\r\n                continue;\r\n            }\r\n            if (rule.end == undefined) {\r\n                if (rule.step! >= 1) {\r\n                    if (value >= rule.start) {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    if (value === rule.start) {\r\n                        return true;\r\n                    }\r\n                }\r\n            } else {\r\n                if (rule.start <= rule.end) {\r\n                    if (value >= rule.start && value <= rule.end) {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    if (value >= rule.start || value <= rule.end) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 转为等效的字符串。\r\n     * @return 返回字符串。\r\n     */\r\n    toString() {\r\n        return `${CronExpression._formatRules(this.seconds)} ${CronExpression._formatRules(this.minutes)} ${CronExpression._formatRules(this.hours)} ${CronExpression._formatRules(this.dayOfMonth)} ${CronExpression._formatRules(this.month)} ${CronExpression._formatRules(this.dayOfWeek)} ${CronExpression._formatRules(this.year)}`.trim();\r\n    }\r\n\r\n    /**\r\n     * 格式化规则为字符串。\r\n     * @param rules 规则。\r\n     * @return 返回字符串。\r\n     */\r\n    private static _formatRules(rules: CronRule[] | undefined) {\r\n        if (!rules) {\r\n            return \"\";\r\n        }\r\n        if (!rules.length) {\r\n            return \"*\";\r\n        }\r\n        return rules.map(rule => `${rule.start != undefined ? rule.start : \"*\"}${rule.end != undefined ? \"-\" + rule.end : \"\"}${rule.step != undefined ? \"/\" + rule.step : \"\"}`).join(\",\");\r\n    }\r\n\r\n    /**\r\n     * 判断指定的日期是否命中当前计划时间。\r\n     * @param date 日期。\r\n     * @return 如果命中则返回 true，否则返回 false。\r\n     */\r\n    match(date: Date) {\r\n        return CronExpression._matchRules(this.year, date.getFullYear()) &&\r\n            CronExpression._matchRules(this.month, date.getMonth()) &&\r\n            (this.dayOfMonth && this.dayOfMonth.length === 0 ? CronExpression._matchRules(this.dayOfWeek, date.getDay()) : this.dayOfWeek && this.dayOfWeek.length === 0 ? CronExpression._matchRules(this.dayOfMonth, date.getDate()) : CronExpression._matchRules(this.dayOfWeek, date.getDay()) || CronExpression._matchRules(this.dayOfMonth, date.getDate())) &&\r\n            CronExpression._matchRules(this.hours, date.getHours()) &&\r\n            CronExpression._matchRules(this.minutes, date.getMinutes()) &&\r\n            CronExpression._matchRules(this.seconds, date.getSeconds());\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * 表示一个计划时间表达式中的一个规则。\r\n */\r\nexport interface CronRule {\r\n\r\n    /**\r\n     * 开始数值（含）。\r\n     */\r\n    start: number;\r\n\r\n    /**\r\n     * 步长。\r\n     * @default 1\r\n     */\r\n    step?: number;\r\n\r\n    /**\r\n     * 结束数值（含）。\r\n     */\r\n    end?: number;\r\n\r\n}\r\n\r\n/**\r\n * 判断指定的字符串是否是合法的计划时间表达式。\r\n * @param value 要判断的字符串。\r\n * @return 如果合法则返回 true，否则返回 false。\r\n */\r\nexport function isValidCronExpression(value: string) {\r\n    const parts = (value || \"\").split(\" \");\r\n    if (parts.length === 5) parts.unshift(\"0\");\r\n    if (parts.length !== 6 && parts.length !== 7) {\r\n        return false;\r\n    }\r\n\r\n    for (let i = 0; i < parts.length; i++) {\r\n        for (let rule of parts[i].split(\",\")) {\r\n            rule = rule.replace(/^((\\/)|\\*)/, \"1-1$2\");\r\n            let re: RegExp;\r\n            switch (i) {\r\n                case 0:\r\n                case 1:\r\n                    re = /^(?:\\d|[1-5]\\d)(?:-(?:\\d|[1-5]\\d))?(?:\\/(?:[1-9]|[1-5]\\d))?$/;\r\n                    break;\r\n                case 2:\r\n                    re = /^(?:\\d|1\\d|2[0-3])(?:-(?:\\d|1\\d|2[0-3]))?(?:\\/(?:[1-9]|1\\d|2[0-3]))?$/;\r\n                    break;\r\n                case 3:\r\n                    rule = rule.replace(\"?\", \"1-1\");\r\n                    re = /^(?:[1-9]|[12]\\d|3[01])(?:-(?:[1-9]|[12]\\d|3[01]))?(?:\\/(?:[1-9]|[12]\\d|3[01]))?$/;\r\n                    break;\r\n                case 4:\r\n                    rule = rule.replace(/(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)/ig, \"1\");\r\n                    re = /^(?:\\d|1[01])(?:-(?:\\d|1[01]))?(?:\\/(?:[1-9]|1[01]))?$/;\r\n                    break;\r\n                case 5:\r\n                    rule = rule.replace(\"?\", \"1-1\").replace(/(?:SUN|MON|TUE|WED|THU|FRI|SAT)/ig, \"1\");\r\n                    re = /^[0-6](?:-[0-6])?(?:\\/[0-6])?$/;\r\n                    break;\r\n                default:\r\n                    re = /^\\d{4}(?:-\\d{4})?(?:\\/[1-9]\\d*)?$/;\r\n                    break;\r\n            }\r\n            if (!re.test(rule)) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n"],"mappings":"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"}